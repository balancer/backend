import { LoadCodegenConfigResult } from '@graphql-codegen/cli';
import config from './config';

const plugins = {
    types: ['typescript', 'typescript-operations', 'typescript-graphql-request'],
    schema: ['schema-ast'],
};

const defaults = {
    types: {
        plugins: plugins.types,
        config: {
            scalars: {
                BigInt: 'string',
                Bytes: 'string',
                BigDecimal: 'string',
            },
        },
    },
};

const files = {
    ['modules/sources/subgraphs/cow-amm/generated/types.ts']: {
        schema: config.MAINNET.subgraphs.cowAmm,
        documents: 'modules/sources/subgraphs/cow-amm/*.graphql',
        ...defaults.types,
    },
    ['modules/sources/subgraphs/balancer-v3-vault/generated/types.ts']: {
        schema: config.SEPOLIA.subgraphs.balancerV3,
        documents: 'modules/sources/subgraphs/balancer-v3-vault/*.graphql',
        ...defaults.types,
    },
    ['modules/sources/subgraphs/balancer-v3-pools/generated/types.ts']: {
        schema: config.SEPOLIA.subgraphs.balancerPoolsV3,
        documents: 'modules/sources/subgraphs/balancer-v3-pools/*.graphql',
        ...defaults.types,
    },
    ['modules/subgraphs/balancer-subgraph/generated/balancer-subgraph-types.ts']: {
        schema: config.MAINNET.subgraphs.balancer,
        documents: 'modules/subgraphs/balancer-subgraph/balancer-subgraph-queries.graphql',
        ...defaults.types,
    },
    ['modules/subgraphs/masterchef-subgraph/generated/masterchef-subgraph-types.ts']: {
        schema: config.FANTOM.subgraphs.masterchef,
        documents: 'modules/subgraphs/masterchef-subgraph/masterchef-subgraph-queries.graphql',
        ...defaults.types,
    },
    ['modules/subgraphs/reliquary-subgraph/generated/reliquary-subgraph-types.ts']: {
        schema: config.FANTOM.subgraphs.reliquary,
        documents: 'modules/subgraphs/reliquary-subgraph/reliquary-subgraph-queries.graphql',
        ...defaults.types,
        config: {
            ...defaults.types.config,
            namingConvention: {
                enumValues: 'keep',
            },
        },
    },
    ['modules/sources/subgraphs/aura/generated/aura-subgraph-types.ts']: {
        schema: config.MAINNET.subgraphs.aura,
        documents: 'modules/sources/subgraphs/aura/aura-subgraph-queries.graphql',
        ...defaults.types,
        config: {
            ...defaults.types.config,
            namingConvention: {
                enumValues: 'keep',
            },
        },
    },
    ['modules/sources/subgraphs/sftmx-subgraph/generated/sftmx-subgraph-types.ts']: {
        schema: config.FANTOM.subgraphs.sftmx,
        documents: 'modules/sources/subgraphs/sftmx-subgraph/sftmx-subgraph-queries.graphql',
        ...defaults.types,
        config: {
            ...defaults.types.config,
            namingConvention: {
                enumValues: 'keep',
            },
        },
    },
    ['modules/subgraphs/blocks-subgraph/generated/blocks-subgraph-types.ts']: {
        schema: config.MAINNET.subgraphs.blocks,
        documents: 'modules/subgraphs/blocks-subgraph/block-subgraph-queries.graphql',
        ...defaults.types,
    },
    ['modules/subgraphs/beets-bar-subgraph/generated/beets-bar-subgraph-types.ts']: {
        schema: config.FANTOM.subgraphs.beetsBar,
        documents: 'modules/subgraphs/beets-bar-subgraph/beets-bar-subgraph-queries.graphql',
        ...defaults.types,
    },
    ['modules/subgraphs/gauge-subgraph/generated/gauge-subgraph-types.ts']: {
        schema: config.MAINNET.subgraphs.gauge,
        documents: 'modules/subgraphs/gauge-subgraph/gauge-subgraph-queries.graphql',
        ...defaults.types,
        config: {
            ...defaults.types.config,
            namingConvention: {
                enumValues: 'keep',
            },
        },
    },
    ['modules/subgraphs/veBal-locks-subgraph/generated/veBal-locks-subgraph-types.ts']: {
        schema: config.MAINNET.subgraphs.gauge,
        documents: 'modules/subgraphs/veBal-locks-subgraph/veBal-locks-subgraph-queries.graphql',
        ...defaults.types,
        config: {
            ...defaults.types.config,
            namingConvention: {
                enumValues: 'keep',
            },
        },
    },
    ['graphql_schema_generated.ts']: {
        schema: './modules/**/*.gql',
        plugins: [
            {
                add: {
                    content:
                        "import { gql } from 'apollo-server-express';\nexport const schema = gql`\n#\n# THIS FILE IS AUTOGENERATED — DO NOT EDIT IT\n#\n",
                },
            },
            'schema-ast',
            { add: { content: '`;', placement: 'append' } },
        ],
    },
    ['schema.ts']: {
        schema: './modules/**/*.gql',
        plugins: [
            {
                add: {
                    content: '/*\n * THIS FILE IS AUTOGENERATED — DO NOT EDIT IT\n */',
                },
            },
            'typescript',
            'typescript-resolvers',
        ],
        config: {
            declarationKind: 'interface',
            immutableTypes: false,
            useIndexSignature: true,
            enumsAsTypes: true,
            contextType: './app/gql/gql-context#Context',
            scalars: {
                Date: 'Date',
                UUID: 'string',
                GqlBigNumber: 'string',
                Bytes: 'string',
                BigDecimal: 'string',
                BigInt: 'string',
                AmountHumanReadable: 'string',
            },
        },
    },
};

export default {
    overwrite: true,
    hooks: {
        afterAllFileWrite: ['prettier --write'],
    },
    generates: files,
} as LoadCodegenConfigResult['config'];
