//******** AUTO GENERATED FILE, DO NOT EDIT.  *********

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"] //, "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Chain {
    ARBITRUM
    AVALANCHE
    BASE
    FANTOM
    GNOSIS
    MAINNET
    OPTIMISM
    POLYGON
    SEPOLIA
    ZKEVM
}

model PrismaLastBlockSynced {
    @@id([category, chain])

    category            PrismaLastBlockSyncedCategory
    chain               Chain       @default(MAINNET)
    blockNumber         Int
}

enum PrismaLastBlockSyncedCategory {
    POOLS
    FARMS
}


model PrismaFbeets {
    id                  String              @id
    ratio               String
}

model PrismaPool {
    @@id([id, chain])
    @@unique([address, chain])

    id                  String
    chain               Chain
    createTime          Int

    address             String
    symbol              String
    name                String
    type                PrismaPoolType
    version             Int                 @default(1)
    decimals            Int                 @default(18)
    owner               String
    factory             String?

    vaultVersion        Int                 @default(2)

    typeData            Json @default("{}")

    tokens              PrismaPoolToken[]

    dynamicData         PrismaPoolDynamicData?

    snapshots           PrismaPoolSnapshot[]
    swaps               PrismaPoolSwap[]
    aprItems            PrismaPoolAprItem[]
    categories          PrismaPoolCategory[]
    tokensWithPoolNested PrismaPoolToken[] @relation(name: "PoolNestedInToken")

    allTokens           PrismaPoolExpandedTokens[]
    allTokensNested     PrismaPoolExpandedTokens[] @relation(name: "NestedPoolForAllToken")
    filters             PrismaPoolFilterMap[]
    staking             PrismaPoolStaking[]

    userWalletBalances  PrismaUserWalletBalance[]
    userStakedBalances  PrismaUserStakedBalance[]

    userPoolBalanceSnapshots    PrismaUserPoolBalanceSnapshot[]
}

enum PrismaPoolType {
    WEIGHTED
    STABLE
    META_STABLE
    PHANTOM_STABLE
    COMPOSABLE_STABLE
    ELEMENT
    LINEAR
    UNKNOWN
    LIQUIDITY_BOOTSTRAPPING
    INVESTMENT
    GYRO
    GYRO3
    GYROE
    FX
}

model PrismaPoolDynamicData {
    @@id([id, chain])
    @@unique([poolId, chain])
    // Indexes used for sorting pools in the UI by different metrics
    @@index(totalLiquidity)
    @@index(totalShares)
    @@index(volume24h)
    @@index(apr)

    id                      String
    poolId                  String
    pool                    PrismaPool          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)
    chain                   Chain
    blockNumber             Int
    updatedAt               DateTime            @updatedAt

    protocolYieldFee        String?             
    protocolSwapFee         String              @default("0")
    swapFee                 String
    swapEnabled             Boolean
    isPaused                Boolean             @default(false)
    isInRecoveryMode        Boolean             @default(false)
    totalShares             String
    totalSharesNum          Float               @default(0)
    totalLiquidity          Float
    volume24h               Float               @default(0)
    fees24h                 Float               @default(0)
    yieldCapture24h         Float               @default(0)
    apr                     Float               @default(0)
    volume48h               Float               @default(0)
    fees48h                 Float               @default(0)
    yieldCapture48h         Float               @default(0)
    totalLiquidity24hAgo    Float               @default(0)
    totalShares24hAgo       String              @default("0")
    lifetimeVolume          Float               @default(0)
    lifetimeSwapFees        Float               @default(0)
    holdersCount            Int                 @default(0)
    swapsCount              Int                 @default(0)

    sharePriceAth           Float               @default(0)
    sharePriceAthTimestamp  Int                 @default(0)
    sharePriceAtl           Float               @default(0)
    sharePriceAtlTimestamp  Int                 @default(0)

    totalLiquidityAth       Float               @default(0)
    totalLiquidityAthTimestamp Int              @default(0)
    totalLiquidityAtl       Float               @default(0)
    totalLiquidityAtlTimestamp Int              @default(0)

    volume24hAth            Float               @default(0)
    volume24hAthTimestamp   Int                 @default(0)
    volume24hAtl            Float               @default(0)
    volume24hAtlTimestamp   Int                 @default(0)

    fees24hAth              Float               @default(0)
    fees24hAthTimestamp     Int                 @default(0)
    fees24hAtl              Float               @default(0)
    fees24hAtlTimestamp     Int                 @default(0)

    tokenPairsData          Json @default("[]")
}

model PrismaPoolToken {
    @@id([id, chain])

    id                          String
    poolId                      String
    pool                        PrismaPool          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)
    chain                       Chain

    address                     String
    token                       PrismaToken          @relation(fields:[address, chain], references: [address, chain])
    index                       Int

    nestedPoolId                String?
    nestedPool                  PrismaPool?         @relation(name: "PoolNestedInToken", fields:[nestedPoolId, chain], references: [id, chain])

    priceRateProvider           String?
    exemptFromProtocolYieldFee  Boolean             @default(false)

    dynamicData         PrismaPoolTokenDynamicData?
}

model PrismaPoolTokenDynamicData {
    @@id([id, chain])
    @@unique([poolTokenId, chain])

    id                  String
    poolTokenId         String
    poolToken           PrismaPoolToken     @relation(fields:[poolTokenId, chain], references: [id, chain], onDelete: Cascade)
    chain               Chain
    blockNumber         Int
    updatedAt           DateTime            @updatedAt

    balance             String
    balanceUSD          Float
    weight              String?
    priceRate           String
    latestFxPrice       Float?
}

model PrismaPoolSwap {
    @@id([id, chain])

    id                  String
    poolId              String
    pool                PrismaPool          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)
    chain               Chain

    userAddress         String
    tokenIn             String
    tokenInSym          String
    tokenOut            String
    tokenOutSym         String
    tokenAmountIn       String
    tokenAmountOut      String
    timestamp           Int
    tx                  String
    valueUSD            Float

    batchSwapId         String?
    batchSwap           PrismaPoolBatchSwap? @relation(fields:[batchSwapId, chain], references: [id, chain])
    batchSwapIdx        Int?
}

model PrismaPoolBatchSwap {
    @@id([id, chain])

    id                  String
    chain               Chain
    userAddress         String
    tokenIn             String
    tokenOut            String
    tokenAmountIn       String
    tokenAmountOut      String
    timestamp           Int
    tx                  String
    valueUSD            Float
    tokenInPrice        Float               @default(0)
    tokenOutPrice       Float               @default(0)

    swaps               PrismaPoolSwap[]
}

model PrismaPoolAprItem {
    @@id([id, chain])

    id                  String
    poolId              String
    pool                PrismaPool          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)
    chain               Chain
    title               String
    apr                 Float
    range               PrismaPoolAprRange?

    type                PrismaPoolAprType?
    group               PrismaPoolAprItemGroup?
}

model PrismaPoolAprRange {
    @@id([id, chain])
    @@unique([aprItemId, chain])

    id                  String
    chain               Chain
    aprItemId           String
    aprItem             PrismaPoolAprItem   @relation(fields:[aprItemId, chain], references: [id, chain], onDelete: Cascade)
    min                 Float
    max                 Float
}

enum PrismaPoolAprType {
    SWAP_FEE
    NATIVE_REWARD
    THIRD_PARTY_REWARD
    LINEAR_BOOSTED
    PHANTOM_STABLE_BOOSTED
    IB_YIELD
    VOTING
}

enum PrismaPoolAprItemGroup {
    BEEFY
    OVERNIGHT
    REAPER
    YEARN
    IDLE
    TRANCHESS
    GEARBOX
    AAVE
    ANKR
    TESSERA
    TETU
    OVIX
    EULER
    MAKER
    DEFAULT
}

model PrismaPoolCategory {
    @@id([id, chain])

    id                  String
    poolId              String
    pool                PrismaPool          @relation(fields:[poolId, chain], references: [id, chain])
    chain               Chain
    category            PrismaPoolCategoryType
}

enum PrismaPoolCategoryType {
    INCENTIVIZED
    BLACK_LISTED
}

model PrismaPoolExpandedTokens {
    @@id([tokenAddress, poolId, chain])

    tokenAddress        String
    token               PrismaToken         @relation(fields:[tokenAddress, chain], references: [address, chain])
    poolId              String
    pool                PrismaPool          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)
    chain               Chain

    nestedPoolId        String?
    nestedPool          PrismaPool?         @relation(name: "NestedPoolForAllToken", fields:[nestedPoolId, chain], references: [id, chain], onDelete: Cascade)
}


model PrismaPoolFilter {
    @@id([id, chain])

    id                  String
    chain               Chain
    title               String

    pools               PrismaPoolFilterMap[]
}

model PrismaPoolFilterMap {
    @@id([id, chain])

    id                  String
    chain               Chain
    filterId            String
    filter              PrismaPoolFilter    @relation(fields:[filterId, chain], references: [id, chain])
    poolId              String
    pool                PrismaPool          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)
}

model PrismaPoolStaking {
    @@id([id, chain])

    id                  String
    poolId              String
    pool                PrismaPool          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)
    chain               Chain
    type                PrismaPoolStakingType
    address             String
    farm                PrismaPoolStakingMasterChefFarm?
    gauge               PrismaPoolStakingGauge?
    reliquary           PrismaPoolStakingReliquaryFarm?

    userStakedBalances  PrismaUserStakedBalance[]
}


enum PrismaPoolStakingType {
    MASTER_CHEF
    GAUGE
    RELIQUARY
    FRESH_BEETS
}

model PrismaPoolStakingMasterChefFarm {
    @@id([id, chain])
    @@unique([stakingId, chain])

    id                  String
    stakingId           String
    staking             PrismaPoolStaking   @relation(fields:[stakingId, chain], references: [id, chain])
    chain               Chain
    beetsPerBlock       String
    rewarders           PrismaPoolStakingMasterChefFarmRewarder[]
}

model PrismaPoolStakingMasterChefFarmRewarder {
    @@id([id, chain])

    id                  String
    farmId              String
    farm                PrismaPoolStakingMasterChefFarm  @relation(fields:[farmId, chain], references: [id, chain])
    chain               Chain

    address             String
    tokenAddress        String
    rewardPerSecond     String
}

model PrismaPoolStakingGauge {
    @@id([id, chain])
    @@unique([stakingId, chain])

    id                  String
    stakingId           String
    staking             PrismaPoolStaking   @relation(fields:[stakingId, chain], references: [id, chain], onDelete: Cascade)
    chain               Chain

    gaugeAddress        String
    votingGauge         PrismaVotingGauge[]
    rewards             PrismaPoolStakingGaugeReward[]
    status              PrismaPoolStakingGaugeStatus    @default(ACTIVE)
    version             Int                             @default(1)
    workingSupply       String                          @default("0.0")
    totalSupply         String                          @default("0.0")
}

enum PrismaPoolStakingGaugeStatus {
    KILLED
    ACTIVE
    PREFERRED
}


model PrismaPoolStakingGaugeReward{
    @@id([id, chain])

    id                  String
    gaugeId             String
    gauge               PrismaPoolStakingGauge @relation(fields:[gaugeId, chain], references: [id, chain], onDelete: Cascade)
    chain               Chain

    tokenAddress        String
    rewardPerSecond     String
}


model PrismaPoolStakingReliquaryFarm {
    @@id([id, chain])
    @@unique([stakingId, chain])

    id                      String
    stakingId               String
    staking                 PrismaPoolStaking   @relation(fields:[stakingId, chain], references: [id, chain])
    chain                   Chain

    name                    String
    beetsPerSecond          String
    totalBalance            String              @default("0")
    totalWeightedBalance    String              @default("0")
    levels                  PrismaPoolStakingReliquaryFarmLevel[]
    snapshots               PrismaReliquaryFarmSnapshot[]
    relicSnapshots          PrismaUserRelicSnapshot[]
}

model PrismaPoolStakingReliquaryFarmLevel {
    @@id([id, chain])

    id                  String
    farmId              String
    farm                PrismaPoolStakingReliquaryFarm  @relation(fields:[farmId, chain], references: [id, chain])
    chain               Chain

    level               Int
    balance             String
    requiredMaturity    Int
    allocationPoints    Int
    apr                 Float
}


model PrismaPoolSnapshot {
    @@id([id, chain])

    id                  String
    poolId              String
    pool                PrismaPool          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)
    chain               Chain
    timestamp           Int

    totalLiquidity      Float
    sharePrice          Float
    volume24h           Float
    fees24h             Float
    totalShares         String
    totalSharesNum      Float
    totalSwapVolume     Float
    totalSwapFee        Float
    swapsCount          Int
    holdersCount        Int
    amounts             String[]
}

model PrismaReliquaryFarmSnapshot {
    @@id([id, chain])

    id                  String
    farmId              String
    stakingFarm         PrismaPoolStakingReliquaryFarm  @relation(fields:[farmId, chain], references: [id, chain])
    chain               Chain

    timestamp           Int
    relicCount          Int
    userCount           Int
    totalBalance        String
    dailyDeposited      String
    dailyWithdrawn      String
    totalLiquidity      String                          @default("0")
    levelBalances       PrismaReliquaryLevelSnapshot[]
    tokenBalances       PrismaReliquaryTokenBalanceSnapshot[]
}

model PrismaReliquaryLevelSnapshot {
    @@id([id, chain])

    id                  String
    farmSnapshotId      String
    farmSnapshot        PrismaReliquaryFarmSnapshot @relation(fields:[farmSnapshotId, chain], references: [id, chain])
    chain               Chain

    level               String
    balance             String
}

model PrismaReliquaryTokenBalanceSnapshot {
    @@id([id, chain])

    id                  String
    farmSnapshotId      String
    farmSnapshot        PrismaReliquaryFarmSnapshot @relation(fields:[farmSnapshotId, chain], references: [id, chain])
    chain               Chain

    address             String
    symbol              String
    name                String
    decimals            Int
    balance             String
}

enum PoolEventType {
    JOIN
    EXIT
    SWAP
}

model PoolEvent {
    id                  String @id
    tx                  String
    type                PoolEventType
    chain               Chain
    poolId              String
    userAddress         String
    blockNumber         Int
    blockTimestamp      Int
    logIndex            Int
    vaultVersion        Int @default(2)
    valueUSD            Float
    payload             Json

    @@index([type])
    @@index([chain])
    @@index([chain, poolId])
    @@index([userAddress])
    @@index([blockNumber])
    @@index([logIndex])
}



model PrismaSftmxStakingData {
    id                      String              @id
    totalFtm                String
    totalFtmStaked          String
    totalFtmInPool          String
    numberOfVaults          Int
    stakingApr              String
    exchangeRate            String

    maxDepositLimit         String
    minDepositLimit         String
    withdrawalDelay         Int

    undelegatePaused        Boolean
    withdrawPaused          Boolean
    maintenancePaused       Boolean

    withdrawalRequests      PrismaSftmxWithdrawalRequest[]
    vaults                  PrismaSftmxVault[]

    snapshots               PrismaSftmxStakingDataSnapshot[]
}

model PrismaSftmxVault {
    id                      String          @id
    vaultIndex              Int
    ftmStakingId            String
    ftmStaking              PrismaSftmxStakingData  @relation(fields:[ftmStakingId], references: [id])

    ftmStaked               String
    matured                 Boolean
    unlockTimestamp         Int
    validatorId             String
    validatorAddress        String
}

model PrismaSftmxWithdrawalRequest {
    id                      String                  @id
    ftmStakingId            String
    ftmStaking              PrismaSftmxStakingData  @relation(fields:[ftmStakingId], references: [id])

    user                    String
    amountSftmx             String
    requestTimestamp        Int
    isWithdrawn             Boolean
}

model PrismaSftmxStakingDataSnapshot {
    id                      String                  @id
    ftmStakingId            String
    ftmStaking              PrismaSftmxStakingData  @relation(fields:[ftmStakingId], references: [id])

    timestamp               Int
    freePoolFtmAmount       String
    lockedFtmAmount         String
    totalFtmAmount          String
    exchangeRate            String
}

model PrismaToken {
    @@id([address, chain])

    address             String
    chain               Chain               

    symbol              String
    name                String
    description         String?
    decimals            Int

    logoURI             String?
    websiteUrl          String?
    discordUrl          String?
    telegramUrl         String?
    twitterUsername     String?
    priority            Int                 @default(0)
    coingeckoPlatformId String?
    coingeckoContractAddress String?
    coingeckoTokenId    String?
    excludedFromCoingecko Boolean           @default(false)

    currentPrice        PrismaTokenCurrentPrice?
    dynamicData         PrismaTokenDynamicData?
    prices              PrismaTokenPrice[]

    types               PrismaTokenType[]

    expandedPools       PrismaPoolExpandedTokens[]
    poolTokens          PrismaPoolToken[]

    walletBalances  PrismaUserWalletBalance[]
    stakedBalances  PrismaUserStakedBalance[]
}


model PrismaTokenCurrentPrice {
    @@id([tokenAddress, chain])

    tokenAddress        String
    token               PrismaToken          @relation(fields:[tokenAddress, chain], references: [address, chain])
    chain               Chain                

    updatedAt           DateTime             @updatedAt
    updatedBy           String?
    timestamp           Int
    price               Float
}

model PrismaTokenPrice {
    @@id([tokenAddress, timestamp, chain])

    tokenAddress        String
    token               PrismaToken         @relation(fields:[tokenAddress, chain], references: [address, chain])
    chain               Chain               
    updatedAt           DateTime            @updatedAt
    updatedBy           String?
    timestamp           Int
    price               Float

    high                Float
    low                 Float
    open                Float
    close               Float

    @@index([timestamp, chain])
    @@index(tokenAddress)
}

model PrismaTokenDynamicData {
    @@id([tokenAddress, chain])

    coingeckoId         String
    tokenAddress        String
    token               PrismaToken         @relation(fields:[tokenAddress, chain], references: [address, chain])
    chain               Chain               
    updatedAt           DateTime            @updatedAt

    price               Float
    ath                 Float
    atl                 Float
    marketCap           Float?
    fdv                 Float?
    high24h             Float
    low24h              Float
    priceChange24h      Float
    priceChangePercent24h Float
    priceChangePercent7d Float?
    priceChangePercent14d Float?
    priceChangePercent30d Float?
}

model PrismaTokenType {
    @@id([id, chain])
    @@unique([tokenAddress, type, chain])

    id                  String
    tokenAddress        String
    token               PrismaToken         @relation(fields:[tokenAddress, chain], references: [address, chain])
    chain               Chain               
    type                PrismaTokenTypeOption
}

enum PrismaTokenTypeOption {
    WHITE_LISTED
    BPT
    PHANTOM_BPT
    LINEAR_WRAPPED_TOKEN
}


model PrismaUser {
    address                 String              @id

    userSnapshots           PrismaUserPoolBalanceSnapshot[]
    relicSnapshots          PrismaUserRelicSnapshot[]

    walletBalances          PrismaUserWalletBalance[]
    stakedBalances          PrismaUserStakedBalance[]
    
    veBalBalance            PrismaVeBalUserBalance[]
}



model PrismaUserWalletBalance {
    @@id([id, chain])
    @@index(userAddress)

    id                      String
    chain                   Chain               

    balance                 String
    balanceNum              Float
    updatedAt               DateTime            @updatedAt

    userAddress             String
    user                    PrismaUser          @relation(fields:[userAddress], references: [address])

    poolId                  String?
    pool                    PrismaPool?         @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)

    tokenAddress            String
    token                   PrismaToken         @relation(fields:[tokenAddress, chain], references: [address, chain])
}


model PrismaUserStakedBalance {
    @@id([id, chain])
    @@index(userAddress)

    id                      String
    chain                   Chain               
    balance                 String
    balanceNum              Float
    updatedAt               DateTime            @updatedAt

    userAddress             String
    user                    PrismaUser          @relation(fields:[userAddress], references: [address])

    poolId                  String?
    pool                    PrismaPool?          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)

    tokenAddress            String
    token                   PrismaToken         @relation(fields:[tokenAddress, chain], references: [address, chain])

    stakingId               String
    staking                 PrismaPoolStaking   @relation(fields:[stakingId, chain], references: [id, chain], onDelete: Cascade)
}

model PrismaUserBalanceSyncStatus {
    @@id([type, chain])

    type                PrismaUserBalanceType
    chain               Chain                   
    blockNumber         Int
}

enum PrismaUserBalanceType {
    WALLET
    STAKED
    RELIQUARY
}

model PrismaUserPoolBalanceSnapshot {
    @@id([id, chain])

    id                      String
    userAddress             String
    user                    PrismaUser          @relation(fields:[userAddress], references: [address])
    chain                   Chain               
    timestamp               Int

    poolToken               String
    poolId                  String?
    pool                    PrismaPool?         @relation(fields:[poolId, chain], references:[id, chain])

    walletBalance           String
    gaugeBalance            String
    farmBalance             String
    totalBalance            String
    percentShare            String
    totalValueUSD           String
    fees24h                 String
}

model PrismaUserRelicSnapshot {
    @@id([id, chain])

    id                      String
    userAddress             String
    user                    PrismaUser          @relation(fields:[userAddress], references: [address])
    chain                   Chain               
    timestamp               Int

    relicId                 Int
    farmId                  String
    farm                    PrismaPoolStakingReliquaryFarm @relation(fields:[farmId, chain], references: [id, chain])
    balance                 String
    entryTimestamp          Int
    level                   Int
}


model PrismaVeBalUserBalance {
    @@id([id, chain])

    id                  String
    chain               Chain

    balance             String

    userAddress         String
    user                PrismaUser          @relation(fields:[userAddress], references: [address])

}

model PrismaVeBalTotalSupply {
    @@id([address, chain])

    address             String
    chain               Chain

    totalSupply         String
}

enum PrismaVotingGaugeStatus {
    KILLED
    ACTIVE
}

model PrismaVotingGauge {
  @@id([id, chain])

  id      String
  chain   Chain

  stakingGauge      PrismaPoolStakingGauge? @relation(fields: [stakingGaugeId, chain], references: [id, chain], onDelete: Cascade)
  status            PrismaVotingGaugeStatus @default(ACTIVE)
  gaugeAddress      String
  stakingGaugeId    String?
  relativeWeight    String?
  relativeWeightCap String?
  addedTimestamp    Int?
}