extend type Query {
    """
    Get swap quote from the SOR, queries both the old and new SOR
    """
    sorGetSwaps(
        chain: GqlChain
        tokenIn: String!
        tokenOut: String!
        swapType: GqlSorSwapType!
        swapAmount: BigDecimal! #expected in human readable form
        swapOptions: GqlSorSwapOptionsInput!
    ): GqlSorGetSwapsResponse!
    """
    Get swap quote from the SOR v2 for the V2 vault
    """
    sorGetSwapPaths(
        """
        The Chain to query
        """
        chain: GqlChain!
        """
        Token address of the tokenIn
        """
        tokenIn: String!
        tokenOut: String!
        swapType: GqlSorSwapType!
        swapAmount: BigDecimal! #expected in human readable form
        queryBatchSwap: Boolean #run queryBatchSwap to update with onchain values, default: true
        useVaultVersion: Int #defaults that it gets the best swap from v2 and v3, can force to use only one vault version
    ): GqlSorGetSwapPaths!
}

type GqlSorGetSwapPaths {
    vaultVersion: Int!
    """
    The token address of the tokenIn provided
    """
    tokenIn: String!
    """
    The token address of the tokenOut provided
    """
    tokenOut: String!
    swapType: GqlSorSwapType!
    swaps: [GqlSorSwap!]! #used by cowswap
    tokenAddresses: [String!]! #used by cowswap
    paths: [GqlSorPath!]! #used by b-sdk
    tokenInAmount: AmountHumanReadable!
    tokenOutAmount: AmountHumanReadable!
    swapAmount: AmountHumanReadable!
    swapAmountScaled: BigDecimal!
    returnAmount: AmountHumanReadable!
    returnAmountScaled: BigDecimal!
    effectivePrice: AmountHumanReadable!
    effectivePriceReversed: AmountHumanReadable!
    routes: [GqlSorSwapRoute!]!
    priceImpact: AmountHumanReadable!
}

type GqlSorPath {
    vaultVersion: Int!
    pools: [String]! #list of pool Ids
    tokens: [Token]!
    outputAmountRaw: String!
    inputAmountRaw: String!
}

type Token {
    address: String!
    decimals: Int!
}

enum GqlSorSwapType {
    EXACT_IN
    EXACT_OUT
}

input GqlSorSwapOptionsInput {
    timestamp: Int #used for caching purposes
    maxPools: Int
    forceRefresh: Boolean #don't use any cached responses
    queryBatchSwap: Boolean #run queryBatchSwap to update with onchain values
}

"""
Configuration options for SOR V2
"""
input GqlGraphTraversalConfigInput {
    """
    The max hops in a path.

    Default: 6
    """
    maxDepth: Int
    """
    Limit of "non-boosted" pools for efficiency.

    Default: 6
    """
    maxNonBoostedPathDepth: Int
    """
    Limit non boosted hop tokens in a boosted path.

    Default: 2
    """
    maxNonBoostedHopTokensInBoostedPath: Int
    """
    Max number of paths to return (can be less)

    Default: 5
    """
    approxPathsToReturn: Int # default 5
    poolIdsToInclude: [String]
}

type GqlSorGetSwapsResponse {
    tokenIn: String!
    tokenOut: String!
    tokenAddresses: [String!]!
    swapType: GqlSorSwapType!
    swaps: [GqlSorSwap!]!
    tokenInAmount: AmountHumanReadable!
    tokenOutAmount: AmountHumanReadable!
    swapAmount: AmountHumanReadable!
    swapAmountScaled: BigDecimal!
    swapAmountForSwaps: BigDecimal
    returnAmount: AmountHumanReadable!
    returnAmountScaled: BigDecimal!
    returnAmountFromSwaps: BigDecimal
    returnAmountConsideringFees: BigDecimal!
    marketSp: String!
    routes: [GqlSorSwapRoute!]!
    effectivePrice: AmountHumanReadable!
    effectivePriceReversed: AmountHumanReadable!
    priceImpact: AmountHumanReadable!
}

#used by cowswap
type GqlSorSwap {
    poolId: String!
    assetInIndex: Int!
    assetOutIndex: Int!
    amount: String!
    userData: String!
}

type GqlSorSwapRoute {
    tokenIn: String!
    tokenInAmount: BigDecimal!
    tokenOut: String!
    tokenOutAmount: BigDecimal!
    share: Float!
    hops: [GqlSorSwapRouteHop!]!
}

type GqlSorSwapRouteHop {
    tokenIn: String!
    tokenInAmount: BigDecimal!
    tokenOut: String!
    tokenOutAmount: BigDecimal!
    poolId: String!
    pool: GqlPoolMinimal!
}

type GqlSorGetBatchSwapForTokensInResponse {
    tokenOutAmount: AmountHumanReadable!
    swaps: [GqlSorSwap!]!
    assets: [String!]!
}
