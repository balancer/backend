extend type Query {
    tokenGetTokens(chains: [GqlChain!]): [GqlToken!]!
    tokenGetCurrentPrices(chains: [GqlChain!]): [GqlTokenPrice!]!
    tokenGetHistoricalPrices(
        addresses: [String!]!
        chain: GqlChain!
        range: GqlTokenChartDataRange!
    ): [GqlHistoricalTokenPrice!]!
    tokenGetTokensDynamicData(addresses: [String!]!, chain: GqlChain): [GqlTokenDynamicData!]!
    tokenGetTokenDynamicData(address: String!, chain: GqlChain): GqlTokenDynamicData
    tokenGetRelativePriceChartData(
        tokenIn: String!
        tokenOut: String!
        range: GqlTokenChartDataRange!
        chain: GqlChain
    ): [GqlTokenPriceChartDataItem!]!
    tokenGetPriceChartData(
        address: String!
        range: GqlTokenChartDataRange!
        chain: GqlChain
    ): [GqlTokenPriceChartDataItem!]!
    tokenGetCandlestickChartData(
        address: String!
        range: GqlTokenChartDataRange!
        chain: GqlChain
    ): [GqlTokenCandlestickChartDataItem!]!
    tokenGetTokenData(address: String!, chain: GqlChain): GqlTokenData
    tokenGetTokensData(addresses: [String!]!): [GqlTokenData!]!
    tokenGetProtocolTokenPrice(chain: GqlChain): AmountHumanReadable!
}

extend type Mutation {
    tokenReloadTokenPrices(chains: [GqlChain!]!): Boolean
    tokenSyncTokenDefinitions: String!
    tokenSyncLatestFxPrices(chain: GqlChain!): String!
    tokenDeleteTokenType(tokenAddress: String!, type: GqlTokenType!): String!
    tokenReloadAllTokenTypes: String!
}

type GqlTokenPrice {
    address: String!
    chain: GqlChain!
    price: Float!
    updatedAt: Int!
    updatedBy: String
}

type GqlHistoricalTokenPrice {
    address: String!
    chain: GqlChain!
    prices: [GqlHistoricalTokenPriceEntry!]!
}

type GqlHistoricalTokenPriceEntry {
    timestamp: String!
    price: Float!
    updatedAt: Int!
    updatedBy: String
}

type GqlToken {
    address: String!
    name: String!
    description: String
    symbol: String!
    decimals: Int!
    chainId: Int!
    websiteUrl: String
    discordUrl: String
    telegramUrl: String
    twitterUsername: String
    logoURI: String
    priority: Int!
    tradable: Boolean!
    chain: GqlChain!
    rateProviderData: GqlPriceRateProviderData
}

type GqlPriceRateProviderData {
    address: String!
    reviewed: Boolean!
    name: String
    summary: String
    reviewUrl: String
    warnings: [String!]
    factory: String
    upgradeableComponents: [GqlPriceRateProviderUpgradeableComponent]
}

type GqlPriceRateProviderUpgradeableComponent {
    entryPoint: String!
    implementationReviewed: String!
}

type GqlTokenDynamicData {
    id: String!
    tokenAddress: String!
    price: Float!
    ath: Float!
    atl: Float!
    marketCap: String
    fdv: String
    high24h: Float!
    low24h: Float!
    priceChange24h: Float!

    priceChangePercent24h: Float!
    priceChangePercent7d: Float
    priceChangePercent14d: Float
    priceChangePercent30d: Float
    updatedAt: String!
}

enum GqlTokenChartDataRange {
    SEVEN_DAY
    THIRTY_DAY
    NINETY_DAY
    ONE_HUNDRED_EIGHTY_DAY
    ONE_YEAR
}

type GqlTokenCandlestickChartDataItem {
    id: ID!
    timestamp: Int!
    open: AmountHumanReadable!
    high: AmountHumanReadable!
    low: AmountHumanReadable!
    close: AmountHumanReadable!
}

type GqlTokenPriceChartDataItem {
    id: ID!
    timestamp: Int!
    price: AmountHumanReadable!
}

type GqlTokenData {
    id: ID!
    tokenAddress: String!
    description: String
    websiteUrl: String
    discordUrl: String
    telegramUrl: String
    twitterUsername: String
}

enum GqlTokenType {
    WHITE_LISTED
    BPT
    PHANTOM_BPT
    LINEAR_WRAPPED_TOKEN
}
