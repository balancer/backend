extend type Query {
    """
    Returns all allowed tokens for a given chain or chains
    """
    tokenGetTokens(chains: [GqlChain!]): [GqlToken!]!
    """
    Returns all current prices for allowed tokens for a given chain or chains
    """
    tokenGetCurrentPrices(chains: [GqlChain!]): [GqlTokenPrice!]!
    """
    Returns the historical prices for a given set of tokens for a given chain and range
    """
    tokenGetHistoricalPrices(
        addresses: [String!]!
        chain: GqlChain!
        range: GqlTokenChartDataRange!
    ): [GqlHistoricalTokenPrice!]!
    """
    Returns dynamic data of a set of tokens such as price, market cap, etc.
    """
    tokenGetTokensDynamicData(addresses: [String!]!, chain: GqlChain): [GqlTokenDynamicData!]!
    """
    Returns dynamic data of a token such as price, market cap, etc.
    """
    tokenGetTokenDynamicData(address: String!, chain: GqlChain): GqlTokenDynamicData
    """
    Returns the price of a token priced in another token for a given range.
    """
    tokenGetRelativePriceChartData(
        tokenIn: String!
        tokenOut: String!
        range: GqlTokenChartDataRange!
        chain: GqlChain
    ): [GqlTokenPriceChartDataItem!]!
    """
    DEPRECATED: Returns pricing data for a given token for a given range
    """
    tokenGetPriceChartData(
        address: String!
        range: GqlTokenChartDataRange!
        chain: GqlChain
    ): [GqlTokenPriceChartDataItem!]! @deprecated(reason: "Use tokenGetHistoricalPrices instead")
    """
    Returns the candlestick chart data for a token for a given range.
    """
    tokenGetCandlestickChartData(
        address: String!
        range: GqlTokenChartDataRange!
        chain: GqlChain
    ): [GqlTokenCandlestickChartDataItem!]! @deprecated(reason: "Use tokenGetHistoricalPrices instead")
    """
    Returns meta data for a given token such as description, website, etc.
    """
    tokenGetTokenData(address: String!, chain: GqlChain): GqlTokenData @deprecated(reason: "Use tokenGetTokens instead")
    """
    Returns meta data for a given set of tokens such as description, website, etc.
    """
    tokenGetTokensData(addresses: [String!]!): [GqlTokenData!]! @deprecated(reason: "Use tokenGetTokens instead")
    """
    Returns the price of either BAL or BEETS depending on chain
    """
    tokenGetProtocolTokenPrice(chain: GqlChain): AmountHumanReadable!
        @deprecated(reason: "Use tokenGetTokensDynamicData instead")
}

extend type Mutation {
    tokenReloadTokenPrices(chains: [GqlChain!]!): Boolean
    tokenSyncTokenDefinitions: String!
    tokenSyncLatestFxPrices(chain: GqlChain!): String!
    tokenDeleteTokenType(tokenAddress: String!, type: GqlTokenType!): String!
    tokenReloadAllTokenTypes: String!
}

type GqlTokenPrice {
    address: String!
    chain: GqlChain!
    price: Float!
    updatedAt: Int!
    updatedBy: String
}

type GqlHistoricalTokenPrice {
    address: String!
    chain: GqlChain!
    prices: [GqlHistoricalTokenPriceEntry!]!
}

type GqlHistoricalTokenPriceEntry {
    timestamp: String!
    price: Float!
    updatedAt: Int!
    updatedBy: String
}
"""
Represents a token in the system
"""
type GqlToken {
    """
    The address of the token
    """
    address: String!
    """
    The name of the token
    """
    name: String!
    """
    The description of the token
    """
    description: String
    """
    The symbol of the token
    """
    symbol: String!
    """
    The number of decimal places for the token
    """
    decimals: Int!
    """
    The chain ID of the token
    """
    chainId: Int!
    """
    The website URL of the token
    """
    websiteUrl: String
    """
    The Discord URL of the token
    """
    discordUrl: String
    """
    The Telegram URL of the token
    """
    telegramUrl: String
    """
    The Twitter username of the token
    """
    twitterUsername: String
    """
    The logo URI of the token
    """
    logoURI: String
    """
    The coingecko ID for this token, if present
    """
    coingeckoId: String
    """
    The priority of the token, can be used for sorting.
    """
    priority: Int!
    """
    Indicates if the token is tradable
    """
    tradable: Boolean!
    """
    The chain of the token
    """
    chain: GqlChain!
    """
    The rate provider data for the token
    """
    priceRateProviderData: GqlPriceRateProviderData
    """
    Whether the token is considered an ERC4626 token.
    """
    isErc4626: Boolean!
}
"""
Represents additional data for a token
"""
type GqlTokenDynamicData {
    """
    The unique identifier of the dynamic data
    """
    id: String!
    """
    The address of the token
    """
    tokenAddress: String!
    """
    The current price of the token
    """
    price: Float!
    """
    The all-time high price of the token
    """
    ath: Float!
    """
    The all-time low price of the token
    """
    atl: Float!
    """
    The market capitalization of the token
    """
    marketCap: String
    """
    The fully diluted valuation of the token
    """
    fdv: String
    """
    The highest price in the last 24 hours
    """
    high24h: Float!
    """
    The lowest price in the last 24 hours
    """
    low24h: Float!
    """
    The price change in the last 24 hours
    """
    priceChange24h: Float!
    """
    The percentage price change in the last 24 hours
    """
    priceChangePercent24h: Float!
    """
    The percentage price change in the last 7 days
    """
    priceChangePercent7d: Float
    """
    The percentage price change in the last 14 days
    """
    priceChangePercent14d: Float
    """
    The percentage price change in the last 30 days
    """
    priceChangePercent30d: Float
    """
    The timestamp when the data was last updated
    """
    updatedAt: String!
}

"""
Represents the data of a price rate provider
"""
type GqlPriceRateProviderData {
    """
    The address of the price rate provider
    """
    address: String!
    """
    Indicates if the price rate provider has been reviewed
    """
    reviewed: Boolean!
    """
    The name of the price rate provider
    """
    name: String
    """
    A summary of the price rate provider, usually just says safe or unsafe
    """
    summary: String
    """
    The filename of the review of the price rate provider
    """
    reviewFile: String
    """
    Warnings associated with the price rate provider
    """
    warnings: [String!]
    """
    The factory used to create the price rate provider, if applicable
    """
    factory: String
    """
    Upgradeable components of the price rate provider
    """
    upgradeableComponents: [GqlPriceRateProviderUpgradeableComponent]
}

"""
Represents an upgradeable component of a price rate provider
"""
type GqlPriceRateProviderUpgradeableComponent {
    """
    The entry point / proxy of the upgradeable component
    """
    entryPoint: String!
    """
    Indicates if the implementation of the component has been reviewed
    """
    implementationReviewed: String!
}

type GqlTokenDynamicData {
    id: String!
    tokenAddress: String!
    price: Float!
    ath: Float!
    atl: Float!
    marketCap: String
    fdv: String
    high24h: Float!
    low24h: Float!
    priceChange24h: Float!

    priceChangePercent24h: Float!
    priceChangePercent7d: Float
    priceChangePercent14d: Float
    priceChangePercent30d: Float
    updatedAt: String!
}

enum GqlTokenChartDataRange {
    SEVEN_DAY
    THIRTY_DAY
    NINETY_DAY
    ONE_HUNDRED_EIGHTY_DAY
    ONE_YEAR
}

type GqlTokenCandlestickChartDataItem {
    id: ID!
    timestamp: Int!
    open: AmountHumanReadable!
    high: AmountHumanReadable!
    low: AmountHumanReadable!
    close: AmountHumanReadable!
}

type GqlTokenPriceChartDataItem {
    id: ID!
    timestamp: Int!
    price: AmountHumanReadable!
}

type GqlTokenData {
    id: ID!
    tokenAddress: String!
    description: String
    websiteUrl: String
    discordUrl: String
    telegramUrl: String
    twitterUsername: String
}

enum GqlTokenType {
    WHITE_LISTED
    BPT
    PHANTOM_BPT
}
