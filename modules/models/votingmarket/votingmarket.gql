extend type Query {
    """
    Retrieve voting market proposals based on the filter.
    """
    votingMarketGetProposals(first: Int, skip: Int, where: GqlVotingProposalFilter): [GqlVotingProposal!]!
}

type GqlVotingProposal {
    """
    Id of the voting market proposal
    """
    id: String!
    """
    Hash of the voting market proposal
    """
    hash: String!
    """
    The voting market this proposal belongs to.
    """
    market: GqlVotingMarketType!
    """
    The voting round this proposal belongs to.
    """
    round: GqlVotingRound!
    """
    The pool ID this proposal belings to.
    """
    poolId: String!
    """
    The address of the root gauge this proposal refers to.
    """
    rootGaugeAddress: String
    """
    The address of the child chain gauge this proposal refers to.
    """
    childGaugeAddress: String
    """
    The chain of this proposal.
    """
    chain: GqlChain!
    """
    The efficiency of the proposal. The ratio of USD value of emitted BAL to the total USD value of all incentives.
    """
    efficiency: Float!
    """
    The title of the proposal. Usually the pool name/description. Also corresponds to the snapshot vote option if voted on snapshot.
    """
    title: String!
    """
    Timestamp when the proposal is finalized and voting ends.
    """
    proposalDeadline: Int!
    """
    Total USD value of all incentives for this proposal.
    """
    totalIncentivesUsd: Float!
    """
    Total number of votes for this proposal.
    """
    voteCount: Float!
    """
    Usd value of one vote that is casted for this proposal.
    """
    valuePerVote: Float!
    """
    The incentives for this proposal.
    """
    incentives: [GqlVotingProposalIncentive!]!
}

type GqlVotingProposalIncentive {
    """
    The token that is used for the incentive.
    """
    token: GqlToken!
    """
    The USD value of the incentive.
    """
    incentiveValueUsd: Float!
    """
    The amount of incentive token that has been deposited.
    """
    incentiveAmount: AmountHumanReadable!
    """
    The address that has deposited the incentive.
    """
    depositor: String!
}

enum GqlVotingMarket {
    VEBAL
    VLAURA
    MABEETS
}

type GqlVotingRound {
    """
    Timestamp when the voting started.
    """
    votingStartTime: Int!
    """
    Timestamp when the voting ended.
    """
    votingEndTime: Int!
    """
    Timestamp when the emission started.
    """
    emissionStartTime: Int!
    """
    Timestamp when the emission ended.
    """
    emissionEndTime: Int!
    """
    The token that is emitted based on voting results
    """
    emissionToken: GqlToken!
    """
    The total token amount that is emitted based on voting results.
    """
    emissionAmount: AmountHumanReadable!
    """
    The total USD value of the token amount that is emitted based on voting results.
    """
    emissionAmountUsd: Float!
}

input GqlVotingProposalFilter {
    proposalDeadline_gte: Int
    proposalDeadline_lte: Int
    poolIdIn: [String!]
    chainIn: [GqlChain!]
    rootGaugeAddressIn: [String!]
    marketIn: [GqlVotingMarket!]
}
