"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

enum Aggregation_interval {
    day
    hour
}

scalar BigDecimal

scalar BigInt

type Block {
    author: String
    difficulty: BigInt
    gasLimit: BigInt
    gasUsed: BigInt
    id: Bytes!
    number: BigInt!
    parentHash: String
    receiptsRoot: String
    size: BigInt
    stateRoot: String
    timestamp: BigInt!
    totalDifficulty: BigInt
    transactionsRoot: String
    unclesHash: String
}

input BlockChangedFilter {
    number_gte: Int!
}

input Block_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [Block_filter]
    author: String
    author_contains: String
    author_contains_nocase: String
    author_ends_with: String
    author_ends_with_nocase: String
    author_gt: String
    author_gte: String
    author_in: [String!]
    author_lt: String
    author_lte: String
    author_not: String
    author_not_contains: String
    author_not_contains_nocase: String
    author_not_ends_with: String
    author_not_ends_with_nocase: String
    author_not_in: [String!]
    author_not_starts_with: String
    author_not_starts_with_nocase: String
    author_starts_with: String
    author_starts_with_nocase: String
    difficulty: BigInt
    difficulty_gt: BigInt
    difficulty_gte: BigInt
    difficulty_in: [BigInt!]
    difficulty_lt: BigInt
    difficulty_lte: BigInt
    difficulty_not: BigInt
    difficulty_not_in: [BigInt!]
    gasLimit: BigInt
    gasLimit_gt: BigInt
    gasLimit_gte: BigInt
    gasLimit_in: [BigInt!]
    gasLimit_lt: BigInt
    gasLimit_lte: BigInt
    gasLimit_not: BigInt
    gasLimit_not_in: [BigInt!]
    gasUsed: BigInt
    gasUsed_gt: BigInt
    gasUsed_gte: BigInt
    gasUsed_in: [BigInt!]
    gasUsed_lt: BigInt
    gasUsed_lte: BigInt
    gasUsed_not: BigInt
    gasUsed_not_in: [BigInt!]
    id: Bytes
    id_contains: Bytes
    id_gt: Bytes
    id_gte: Bytes
    id_in: [Bytes!]
    id_lt: Bytes
    id_lte: Bytes
    id_not: Bytes
    id_not_contains: Bytes
    id_not_in: [Bytes!]
    number: BigInt
    number_gt: BigInt
    number_gte: BigInt
    number_in: [BigInt!]
    number_lt: BigInt
    number_lte: BigInt
    number_not: BigInt
    number_not_in: [BigInt!]
    or: [Block_filter]
    parentHash: String
    parentHash_contains: String
    parentHash_contains_nocase: String
    parentHash_ends_with: String
    parentHash_ends_with_nocase: String
    parentHash_gt: String
    parentHash_gte: String
    parentHash_in: [String!]
    parentHash_lt: String
    parentHash_lte: String
    parentHash_not: String
    parentHash_not_contains: String
    parentHash_not_contains_nocase: String
    parentHash_not_ends_with: String
    parentHash_not_ends_with_nocase: String
    parentHash_not_in: [String!]
    parentHash_not_starts_with: String
    parentHash_not_starts_with_nocase: String
    parentHash_starts_with: String
    parentHash_starts_with_nocase: String
    receiptsRoot: String
    receiptsRoot_contains: String
    receiptsRoot_contains_nocase: String
    receiptsRoot_ends_with: String
    receiptsRoot_ends_with_nocase: String
    receiptsRoot_gt: String
    receiptsRoot_gte: String
    receiptsRoot_in: [String!]
    receiptsRoot_lt: String
    receiptsRoot_lte: String
    receiptsRoot_not: String
    receiptsRoot_not_contains: String
    receiptsRoot_not_contains_nocase: String
    receiptsRoot_not_ends_with: String
    receiptsRoot_not_ends_with_nocase: String
    receiptsRoot_not_in: [String!]
    receiptsRoot_not_starts_with: String
    receiptsRoot_not_starts_with_nocase: String
    receiptsRoot_starts_with: String
    receiptsRoot_starts_with_nocase: String
    size: BigInt
    size_gt: BigInt
    size_gte: BigInt
    size_in: [BigInt!]
    size_lt: BigInt
    size_lte: BigInt
    size_not: BigInt
    size_not_in: [BigInt!]
    stateRoot: String
    stateRoot_contains: String
    stateRoot_contains_nocase: String
    stateRoot_ends_with: String
    stateRoot_ends_with_nocase: String
    stateRoot_gt: String
    stateRoot_gte: String
    stateRoot_in: [String!]
    stateRoot_lt: String
    stateRoot_lte: String
    stateRoot_not: String
    stateRoot_not_contains: String
    stateRoot_not_contains_nocase: String
    stateRoot_not_ends_with: String
    stateRoot_not_ends_with_nocase: String
    stateRoot_not_in: [String!]
    stateRoot_not_starts_with: String
    stateRoot_not_starts_with_nocase: String
    stateRoot_starts_with: String
    stateRoot_starts_with_nocase: String
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    totalDifficulty: BigInt
    totalDifficulty_gt: BigInt
    totalDifficulty_gte: BigInt
    totalDifficulty_in: [BigInt!]
    totalDifficulty_lt: BigInt
    totalDifficulty_lte: BigInt
    totalDifficulty_not: BigInt
    totalDifficulty_not_in: [BigInt!]
    transactionsRoot: String
    transactionsRoot_contains: String
    transactionsRoot_contains_nocase: String
    transactionsRoot_ends_with: String
    transactionsRoot_ends_with_nocase: String
    transactionsRoot_gt: String
    transactionsRoot_gte: String
    transactionsRoot_in: [String!]
    transactionsRoot_lt: String
    transactionsRoot_lte: String
    transactionsRoot_not: String
    transactionsRoot_not_contains: String
    transactionsRoot_not_contains_nocase: String
    transactionsRoot_not_ends_with: String
    transactionsRoot_not_ends_with_nocase: String
    transactionsRoot_not_in: [String!]
    transactionsRoot_not_starts_with: String
    transactionsRoot_not_starts_with_nocase: String
    transactionsRoot_starts_with: String
    transactionsRoot_starts_with_nocase: String
    unclesHash: String
    unclesHash_contains: String
    unclesHash_contains_nocase: String
    unclesHash_ends_with: String
    unclesHash_ends_with_nocase: String
    unclesHash_gt: String
    unclesHash_gte: String
    unclesHash_in: [String!]
    unclesHash_lt: String
    unclesHash_lte: String
    unclesHash_not: String
    unclesHash_not_contains: String
    unclesHash_not_contains_nocase: String
    unclesHash_not_ends_with: String
    unclesHash_not_ends_with_nocase: String
    unclesHash_not_in: [String!]
    unclesHash_not_starts_with: String
    unclesHash_not_starts_with_nocase: String
    unclesHash_starts_with: String
    unclesHash_starts_with_nocase: String
}

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

enum Block_orderBy {
    author
    difficulty
    gasLimit
    gasUsed
    id
    number
    parentHash
    receiptsRoot
    size
    stateRoot
    timestamp
    totalDifficulty
    transactionsRoot
    unclesHash
}

scalar Bytes

"""
8 bytes signed integer
"""
scalar Int8

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
    asc
    desc
}

type Query {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    block(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Block
    blocks(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Block_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Block_filter
    ): [Block!]!
}

type Subscription {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    block(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Block
    blocks(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Block_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Block_filter
    ): [Block!]!
}

"""
A string representation of microseconds UNIX timestamp (16 digits)
"""
scalar Timestamp

type _Block_ {
    """
    The hash of the block
    """
    hash: Bytes

    """
    The block number
    """
    number: Int!

    """
    The hash of the parent block
    """
    parentHash: Bytes

    """
    Integer representation of the timestamp stored in blocks for the chain
    """
    timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
    """
    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!

    """
    The deployment ID
    """
    deployment: String!

    """
    If `true`, the subgraph encountered indexing errors at some past block
    """
    hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
    """
    Data will be returned even if the subgraph has indexing errors
    """
    allow

    """
    If the subgraph has indexing errors, data will be omitted. The default.
    """
    deny
}
