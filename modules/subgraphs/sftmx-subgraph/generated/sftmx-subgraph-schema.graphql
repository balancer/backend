"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

enum Aggregation_interval {
    day
    hour
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
    number_gte: Int!
}

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

scalar Bytes

type FtmStaking {
    id: Bytes!
    maintenancePaused: Boolean!
    maxDepositLimit: BigInt!
    minDepositLimit: BigInt!
    undelegatePaused: Boolean!
    users(
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: User_filter
    ): [User!]
    vaults(
        first: Int = 100
        orderBy: Vault_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: Vault_filter
    ): [Vault!]
    withdrawPaused: Boolean!
}

type FtmStakingSnapshot {
    exchangeRate: BigDecimal!
    freePoolFtmAmount: BigDecimal!
    id: Bytes!
    lockedFtmAmount: BigDecimal!
    snapshotTimestamp: Int!
    totalFtmAmount: BigDecimal!
}

input FtmStakingSnapshot_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [FtmStakingSnapshot_filter]
    exchangeRate: BigDecimal
    exchangeRate_gt: BigDecimal
    exchangeRate_gte: BigDecimal
    exchangeRate_in: [BigDecimal!]
    exchangeRate_lt: BigDecimal
    exchangeRate_lte: BigDecimal
    exchangeRate_not: BigDecimal
    exchangeRate_not_in: [BigDecimal!]
    freePoolFtmAmount: BigDecimal
    freePoolFtmAmount_gt: BigDecimal
    freePoolFtmAmount_gte: BigDecimal
    freePoolFtmAmount_in: [BigDecimal!]
    freePoolFtmAmount_lt: BigDecimal
    freePoolFtmAmount_lte: BigDecimal
    freePoolFtmAmount_not: BigDecimal
    freePoolFtmAmount_not_in: [BigDecimal!]
    id: Bytes
    id_contains: Bytes
    id_gt: Bytes
    id_gte: Bytes
    id_in: [Bytes!]
    id_lt: Bytes
    id_lte: Bytes
    id_not: Bytes
    id_not_contains: Bytes
    id_not_in: [Bytes!]
    lockedFtmAmount: BigDecimal
    lockedFtmAmount_gt: BigDecimal
    lockedFtmAmount_gte: BigDecimal
    lockedFtmAmount_in: [BigDecimal!]
    lockedFtmAmount_lt: BigDecimal
    lockedFtmAmount_lte: BigDecimal
    lockedFtmAmount_not: BigDecimal
    lockedFtmAmount_not_in: [BigDecimal!]
    or: [FtmStakingSnapshot_filter]
    snapshotTimestamp: Int
    snapshotTimestamp_gt: Int
    snapshotTimestamp_gte: Int
    snapshotTimestamp_in: [Int!]
    snapshotTimestamp_lt: Int
    snapshotTimestamp_lte: Int
    snapshotTimestamp_not: Int
    snapshotTimestamp_not_in: [Int!]
    totalFtmAmount: BigDecimal
    totalFtmAmount_gt: BigDecimal
    totalFtmAmount_gte: BigDecimal
    totalFtmAmount_in: [BigDecimal!]
    totalFtmAmount_lt: BigDecimal
    totalFtmAmount_lte: BigDecimal
    totalFtmAmount_not: BigDecimal
    totalFtmAmount_not_in: [BigDecimal!]
}

enum FtmStakingSnapshot_orderBy {
    exchangeRate
    freePoolFtmAmount
    id
    lockedFtmAmount
    snapshotTimestamp
    totalFtmAmount
}

input FtmStaking_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [FtmStaking_filter]
    id: Bytes
    id_contains: Bytes
    id_gt: Bytes
    id_gte: Bytes
    id_in: [Bytes!]
    id_lt: Bytes
    id_lte: Bytes
    id_not: Bytes
    id_not_contains: Bytes
    id_not_in: [Bytes!]
    maintenancePaused: Boolean
    maintenancePaused_in: [Boolean!]
    maintenancePaused_not: Boolean
    maintenancePaused_not_in: [Boolean!]
    maxDepositLimit: BigInt
    maxDepositLimit_gt: BigInt
    maxDepositLimit_gte: BigInt
    maxDepositLimit_in: [BigInt!]
    maxDepositLimit_lt: BigInt
    maxDepositLimit_lte: BigInt
    maxDepositLimit_not: BigInt
    maxDepositLimit_not_in: [BigInt!]
    minDepositLimit: BigInt
    minDepositLimit_gt: BigInt
    minDepositLimit_gte: BigInt
    minDepositLimit_in: [BigInt!]
    minDepositLimit_lt: BigInt
    minDepositLimit_lte: BigInt
    minDepositLimit_not: BigInt
    minDepositLimit_not_in: [BigInt!]
    or: [FtmStaking_filter]
    undelegatePaused: Boolean
    undelegatePaused_in: [Boolean!]
    undelegatePaused_not: Boolean
    undelegatePaused_not_in: [Boolean!]
    users_: User_filter
    vaults_: Vault_filter
    withdrawPaused: Boolean
    withdrawPaused_in: [Boolean!]
    withdrawPaused_not: Boolean
    withdrawPaused_not_in: [Boolean!]
}

enum FtmStaking_orderBy {
    id
    maintenancePaused
    maxDepositLimit
    minDepositLimit
    undelegatePaused
    users
    vaults
    withdrawPaused
}

"""
8 bytes signed integer
"""
scalar Int8

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
    asc
    desc
}

type Query {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    ftmStaking(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): FtmStaking
    ftmStakingSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): FtmStakingSnapshot
    ftmStakingSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: FtmStakingSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: FtmStakingSnapshot_filter
    ): [FtmStakingSnapshot!]!
    ftmStakings(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: FtmStaking_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: FtmStaking_filter
    ): [FtmStaking!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
    vault(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Vault
    vaults(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Vault_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Vault_filter
    ): [Vault!]!
    withdrawalRequest(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): WithdrawalRequest
    withdrawalRequests(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: WithdrawalRequest_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: WithdrawalRequest_filter
    ): [WithdrawalRequest!]!
}

type Subscription {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    ftmStaking(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): FtmStaking
    ftmStakingSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): FtmStakingSnapshot
    ftmStakingSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: FtmStakingSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: FtmStakingSnapshot_filter
    ): [FtmStakingSnapshot!]!
    ftmStakings(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: FtmStaking_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: FtmStaking_filter
    ): [FtmStaking!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
    vault(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Vault
    vaults(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Vault_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Vault_filter
    ): [Vault!]!
    withdrawalRequest(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): WithdrawalRequest
    withdrawalRequests(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: WithdrawalRequest_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: WithdrawalRequest_filter
    ): [WithdrawalRequest!]!
}

type User {
    ftmStaking: FtmStaking!
    id: Bytes!
    withdrawalRequests(
        first: Int = 100
        orderBy: WithdrawalRequest_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: WithdrawalRequest_filter
    ): [WithdrawalRequest!]
}

input User_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [User_filter]
    ftmStaking: String
    ftmStaking_: FtmStaking_filter
    ftmStaking_contains: String
    ftmStaking_contains_nocase: String
    ftmStaking_ends_with: String
    ftmStaking_ends_with_nocase: String
    ftmStaking_gt: String
    ftmStaking_gte: String
    ftmStaking_in: [String!]
    ftmStaking_lt: String
    ftmStaking_lte: String
    ftmStaking_not: String
    ftmStaking_not_contains: String
    ftmStaking_not_contains_nocase: String
    ftmStaking_not_ends_with: String
    ftmStaking_not_ends_with_nocase: String
    ftmStaking_not_in: [String!]
    ftmStaking_not_starts_with: String
    ftmStaking_not_starts_with_nocase: String
    ftmStaking_starts_with: String
    ftmStaking_starts_with_nocase: String
    id: Bytes
    id_contains: Bytes
    id_gt: Bytes
    id_gte: Bytes
    id_in: [Bytes!]
    id_lt: Bytes
    id_lte: Bytes
    id_not: Bytes
    id_not_contains: Bytes
    id_not_in: [Bytes!]
    or: [User_filter]
    withdrawalRequests_: WithdrawalRequest_filter
}

enum User_orderBy {
    ftmStaking
    ftmStaking__id
    ftmStaking__maintenancePaused
    ftmStaking__maxDepositLimit
    ftmStaking__minDepositLimit
    ftmStaking__undelegatePaused
    ftmStaking__withdrawPaused
    id
    withdrawalRequests
}

type Vault {
    amountLocked: BigDecimal!
    ftmStaking: FtmStaking!
    id: Bytes!
    isHarvested: Boolean!
    isWithdrawn: Boolean!
    lockExpireTimestamp: BigInt!
    lockupDuration: BigInt!
    lockupTimestamp: BigInt!
    toValidatorAddress: Bytes!
    toValidatorId: BigInt!
}

input Vault_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    amountLocked: BigDecimal
    amountLocked_gt: BigDecimal
    amountLocked_gte: BigDecimal
    amountLocked_in: [BigDecimal!]
    amountLocked_lt: BigDecimal
    amountLocked_lte: BigDecimal
    amountLocked_not: BigDecimal
    amountLocked_not_in: [BigDecimal!]
    and: [Vault_filter]
    ftmStaking: String
    ftmStaking_: FtmStaking_filter
    ftmStaking_contains: String
    ftmStaking_contains_nocase: String
    ftmStaking_ends_with: String
    ftmStaking_ends_with_nocase: String
    ftmStaking_gt: String
    ftmStaking_gte: String
    ftmStaking_in: [String!]
    ftmStaking_lt: String
    ftmStaking_lte: String
    ftmStaking_not: String
    ftmStaking_not_contains: String
    ftmStaking_not_contains_nocase: String
    ftmStaking_not_ends_with: String
    ftmStaking_not_ends_with_nocase: String
    ftmStaking_not_in: [String!]
    ftmStaking_not_starts_with: String
    ftmStaking_not_starts_with_nocase: String
    ftmStaking_starts_with: String
    ftmStaking_starts_with_nocase: String
    id: Bytes
    id_contains: Bytes
    id_gt: Bytes
    id_gte: Bytes
    id_in: [Bytes!]
    id_lt: Bytes
    id_lte: Bytes
    id_not: Bytes
    id_not_contains: Bytes
    id_not_in: [Bytes!]
    isHarvested: Boolean
    isHarvested_in: [Boolean!]
    isHarvested_not: Boolean
    isHarvested_not_in: [Boolean!]
    isWithdrawn: Boolean
    isWithdrawn_in: [Boolean!]
    isWithdrawn_not: Boolean
    isWithdrawn_not_in: [Boolean!]
    lockExpireTimestamp: BigInt
    lockExpireTimestamp_gt: BigInt
    lockExpireTimestamp_gte: BigInt
    lockExpireTimestamp_in: [BigInt!]
    lockExpireTimestamp_lt: BigInt
    lockExpireTimestamp_lte: BigInt
    lockExpireTimestamp_not: BigInt
    lockExpireTimestamp_not_in: [BigInt!]
    lockupDuration: BigInt
    lockupDuration_gt: BigInt
    lockupDuration_gte: BigInt
    lockupDuration_in: [BigInt!]
    lockupDuration_lt: BigInt
    lockupDuration_lte: BigInt
    lockupDuration_not: BigInt
    lockupDuration_not_in: [BigInt!]
    lockupTimestamp: BigInt
    lockupTimestamp_gt: BigInt
    lockupTimestamp_gte: BigInt
    lockupTimestamp_in: [BigInt!]
    lockupTimestamp_lt: BigInt
    lockupTimestamp_lte: BigInt
    lockupTimestamp_not: BigInt
    lockupTimestamp_not_in: [BigInt!]
    or: [Vault_filter]
    toValidatorAddress: Bytes
    toValidatorAddress_contains: Bytes
    toValidatorAddress_gt: Bytes
    toValidatorAddress_gte: Bytes
    toValidatorAddress_in: [Bytes!]
    toValidatorAddress_lt: Bytes
    toValidatorAddress_lte: Bytes
    toValidatorAddress_not: Bytes
    toValidatorAddress_not_contains: Bytes
    toValidatorAddress_not_in: [Bytes!]
    toValidatorId: BigInt
    toValidatorId_gt: BigInt
    toValidatorId_gte: BigInt
    toValidatorId_in: [BigInt!]
    toValidatorId_lt: BigInt
    toValidatorId_lte: BigInt
    toValidatorId_not: BigInt
    toValidatorId_not_in: [BigInt!]
}

enum Vault_orderBy {
    amountLocked
    ftmStaking
    ftmStaking__id
    ftmStaking__maintenancePaused
    ftmStaking__maxDepositLimit
    ftmStaking__minDepositLimit
    ftmStaking__undelegatePaused
    ftmStaking__withdrawPaused
    id
    isHarvested
    isWithdrawn
    lockExpireTimestamp
    lockupDuration
    lockupTimestamp
    toValidatorAddress
    toValidatorId
}

type WithdrawalRequest {
    amount: BigDecimal!
    id: String!
    isWithdrawn: Boolean!
    requestTime: Int!
    user: User!
}

input WithdrawalRequest_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    amount: BigDecimal
    amount_gt: BigDecimal
    amount_gte: BigDecimal
    amount_in: [BigDecimal!]
    amount_lt: BigDecimal
    amount_lte: BigDecimal
    amount_not: BigDecimal
    amount_not_in: [BigDecimal!]
    and: [WithdrawalRequest_filter]
    id: String
    id_contains: String
    id_contains_nocase: String
    id_ends_with: String
    id_ends_with_nocase: String
    id_gt: String
    id_gte: String
    id_in: [String!]
    id_lt: String
    id_lte: String
    id_not: String
    id_not_contains: String
    id_not_contains_nocase: String
    id_not_ends_with: String
    id_not_ends_with_nocase: String
    id_not_in: [String!]
    id_not_starts_with: String
    id_not_starts_with_nocase: String
    id_starts_with: String
    id_starts_with_nocase: String
    isWithdrawn: Boolean
    isWithdrawn_in: [Boolean!]
    isWithdrawn_not: Boolean
    isWithdrawn_not_in: [Boolean!]
    or: [WithdrawalRequest_filter]
    requestTime: Int
    requestTime_gt: Int
    requestTime_gte: Int
    requestTime_in: [Int!]
    requestTime_lt: Int
    requestTime_lte: Int
    requestTime_not: Int
    requestTime_not_in: [Int!]
    user: String
    user_: User_filter
    user_contains: String
    user_contains_nocase: String
    user_ends_with: String
    user_ends_with_nocase: String
    user_gt: String
    user_gte: String
    user_in: [String!]
    user_lt: String
    user_lte: String
    user_not: String
    user_not_contains: String
    user_not_contains_nocase: String
    user_not_ends_with: String
    user_not_ends_with_nocase: String
    user_not_in: [String!]
    user_not_starts_with: String
    user_not_starts_with_nocase: String
    user_starts_with: String
    user_starts_with_nocase: String
}

enum WithdrawalRequest_orderBy {
    amount
    id
    isWithdrawn
    requestTime
    user
    user__id
}

type _Block_ {
    """
    The hash of the block
    """
    hash: Bytes

    """
    The block number
    """
    number: Int!

    """
    The hash of the parent block
    """
    parentHash: Bytes

    """
    Integer representation of the timestamp stored in blocks for the chain
    """
    timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
    """
    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!

    """
    The deployment ID
    """
    deployment: String!

    """
    If `true`, the subgraph encountered indexing errors at some past block
    """
    hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
    """
    Data will be returned even if the subgraph has indexing errors
    """
    allow

    """
    If the subgraph has indexing errors, data will be omitted. The default.
    """
    deny
}
