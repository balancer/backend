"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

enum Aggregation_interval {
    day
    hour
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
    number_gte: Int!
}

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

scalar Bytes

type HarvestAction {
    amount: BigInt!
    block: BigInt!
    id: ID!
    timestamp: BigInt!
    token: Bytes!
    user: User
}

input HarvestAction_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    amount: BigInt
    amount_gt: BigInt
    amount_gte: BigInt
    amount_in: [BigInt!]
    amount_lt: BigInt
    amount_lte: BigInt
    amount_not: BigInt
    amount_not_in: [BigInt!]
    and: [HarvestAction_filter]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [HarvestAction_filter]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    token: Bytes
    token_contains: Bytes
    token_gt: Bytes
    token_gte: Bytes
    token_in: [Bytes!]
    token_lt: Bytes
    token_lte: Bytes
    token_not: Bytes
    token_not_contains: Bytes
    token_not_in: [Bytes!]
    user: String
    user_: User_filter
    user_contains: String
    user_contains_nocase: String
    user_ends_with: String
    user_ends_with_nocase: String
    user_gt: String
    user_gte: String
    user_in: [String!]
    user_lt: String
    user_lte: String
    user_not: String
    user_not_contains: String
    user_not_contains_nocase: String
    user_not_ends_with: String
    user_not_ends_with_nocase: String
    user_not_in: [String!]
    user_not_starts_with: String
    user_not_starts_with_nocase: String
    user_starts_with: String
    user_starts_with_nocase: String
}

enum HarvestAction_orderBy {
    amount
    block
    id
    timestamp
    token
    user
    user__address
    user__amount
    user__beetsHarvested
    user__block
    user__id
    user__rewardDebt
    user__timestamp
}

"""
8 bytes signed integer
"""
scalar Int8

type MasterChef {
    beets: Bytes!
    beetsPerBlock: BigInt!
    block: BigInt!
    id: ID!
    poolCount: BigInt!
    pools(
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: Pool_filter
    ): [Pool!]
    timestamp: BigInt!
    totalAllocPoint: BigInt!
}

input MasterChef_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [MasterChef_filter]
    beets: Bytes
    beetsPerBlock: BigInt
    beetsPerBlock_gt: BigInt
    beetsPerBlock_gte: BigInt
    beetsPerBlock_in: [BigInt!]
    beetsPerBlock_lt: BigInt
    beetsPerBlock_lte: BigInt
    beetsPerBlock_not: BigInt
    beetsPerBlock_not_in: [BigInt!]
    beets_contains: Bytes
    beets_gt: Bytes
    beets_gte: Bytes
    beets_in: [Bytes!]
    beets_lt: Bytes
    beets_lte: Bytes
    beets_not: Bytes
    beets_not_contains: Bytes
    beets_not_in: [Bytes!]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [MasterChef_filter]
    poolCount: BigInt
    poolCount_gt: BigInt
    poolCount_gte: BigInt
    poolCount_in: [BigInt!]
    poolCount_lt: BigInt
    poolCount_lte: BigInt
    poolCount_not: BigInt
    poolCount_not_in: [BigInt!]
    pools_: Pool_filter
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    totalAllocPoint: BigInt
    totalAllocPoint_gt: BigInt
    totalAllocPoint_gte: BigInt
    totalAllocPoint_in: [BigInt!]
    totalAllocPoint_lt: BigInt
    totalAllocPoint_lte: BigInt
    totalAllocPoint_not: BigInt
    totalAllocPoint_not_in: [BigInt!]
}

enum MasterChef_orderBy {
    beets
    beetsPerBlock
    block
    id
    poolCount
    pools
    timestamp
    totalAllocPoint
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
    asc
    desc
}

type Pool {
    accBeetsPerShare: BigInt!
    allocPoint: BigInt!
    block: BigInt!
    id: ID!
    lastRewardBlock: BigInt!
    masterChef: MasterChef!
    pair: Bytes!
    rewarder: Rewarder
    slpBalance: BigInt!
    timestamp: BigInt!
    userCount: BigInt!
    users(
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: User_filter
    ): [User!]!
}

input Pool_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    accBeetsPerShare: BigInt
    accBeetsPerShare_gt: BigInt
    accBeetsPerShare_gte: BigInt
    accBeetsPerShare_in: [BigInt!]
    accBeetsPerShare_lt: BigInt
    accBeetsPerShare_lte: BigInt
    accBeetsPerShare_not: BigInt
    accBeetsPerShare_not_in: [BigInt!]
    allocPoint: BigInt
    allocPoint_gt: BigInt
    allocPoint_gte: BigInt
    allocPoint_in: [BigInt!]
    allocPoint_lt: BigInt
    allocPoint_lte: BigInt
    allocPoint_not: BigInt
    allocPoint_not_in: [BigInt!]
    and: [Pool_filter]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    lastRewardBlock: BigInt
    lastRewardBlock_gt: BigInt
    lastRewardBlock_gte: BigInt
    lastRewardBlock_in: [BigInt!]
    lastRewardBlock_lt: BigInt
    lastRewardBlock_lte: BigInt
    lastRewardBlock_not: BigInt
    lastRewardBlock_not_in: [BigInt!]
    masterChef: String
    masterChef_: MasterChef_filter
    masterChef_contains: String
    masterChef_contains_nocase: String
    masterChef_ends_with: String
    masterChef_ends_with_nocase: String
    masterChef_gt: String
    masterChef_gte: String
    masterChef_in: [String!]
    masterChef_lt: String
    masterChef_lte: String
    masterChef_not: String
    masterChef_not_contains: String
    masterChef_not_contains_nocase: String
    masterChef_not_ends_with: String
    masterChef_not_ends_with_nocase: String
    masterChef_not_in: [String!]
    masterChef_not_starts_with: String
    masterChef_not_starts_with_nocase: String
    masterChef_starts_with: String
    masterChef_starts_with_nocase: String
    or: [Pool_filter]
    pair: Bytes
    pair_contains: Bytes
    pair_gt: Bytes
    pair_gte: Bytes
    pair_in: [Bytes!]
    pair_lt: Bytes
    pair_lte: Bytes
    pair_not: Bytes
    pair_not_contains: Bytes
    pair_not_in: [Bytes!]
    rewarder: String
    rewarder_: Rewarder_filter
    rewarder_contains: String
    rewarder_contains_nocase: String
    rewarder_ends_with: String
    rewarder_ends_with_nocase: String
    rewarder_gt: String
    rewarder_gte: String
    rewarder_in: [String!]
    rewarder_lt: String
    rewarder_lte: String
    rewarder_not: String
    rewarder_not_contains: String
    rewarder_not_contains_nocase: String
    rewarder_not_ends_with: String
    rewarder_not_ends_with_nocase: String
    rewarder_not_in: [String!]
    rewarder_not_starts_with: String
    rewarder_not_starts_with_nocase: String
    rewarder_starts_with: String
    rewarder_starts_with_nocase: String
    slpBalance: BigInt
    slpBalance_gt: BigInt
    slpBalance_gte: BigInt
    slpBalance_in: [BigInt!]
    slpBalance_lt: BigInt
    slpBalance_lte: BigInt
    slpBalance_not: BigInt
    slpBalance_not_in: [BigInt!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    userCount: BigInt
    userCount_gt: BigInt
    userCount_gte: BigInt
    userCount_in: [BigInt!]
    userCount_lt: BigInt
    userCount_lte: BigInt
    userCount_not: BigInt
    userCount_not_in: [BigInt!]
    users_: User_filter
}

enum Pool_orderBy {
    accBeetsPerShare
    allocPoint
    block
    id
    lastRewardBlock
    masterChef
    masterChef__beets
    masterChef__beetsPerBlock
    masterChef__block
    masterChef__id
    masterChef__poolCount
    masterChef__timestamp
    masterChef__totalAllocPoint
    pair
    rewarder
    rewarder__block
    rewarder__id
    rewarder__timestamp
    slpBalance
    timestamp
    userCount
    users
}

type Query {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    harvestAction(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): HarvestAction
    harvestActions(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: HarvestAction_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: HarvestAction_filter
    ): [HarvestAction!]!
    masterChef(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): MasterChef
    masterChefs(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: MasterChef_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: MasterChef_filter
    ): [MasterChef!]!
    pool(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Pool
    pools(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Pool_filter
    ): [Pool!]!
    rewardToken(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): RewardToken
    rewardTokens(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: RewardToken_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: RewardToken_filter
    ): [RewardToken!]!
    rewarder(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Rewarder
    rewarders(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Rewarder_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Rewarder_filter
    ): [Rewarder!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
}

type RewardToken {
    block: BigInt!
    decimals: Int!
    id: ID!
    rewardPerSecond: BigInt!
    rewarder: Rewarder
    symbol: String!
    timestamp: BigInt!
    token: Bytes!
}

input RewardToken_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [RewardToken_filter]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    decimals: Int
    decimals_gt: Int
    decimals_gte: Int
    decimals_in: [Int!]
    decimals_lt: Int
    decimals_lte: Int
    decimals_not: Int
    decimals_not_in: [Int!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [RewardToken_filter]
    rewardPerSecond: BigInt
    rewardPerSecond_gt: BigInt
    rewardPerSecond_gte: BigInt
    rewardPerSecond_in: [BigInt!]
    rewardPerSecond_lt: BigInt
    rewardPerSecond_lte: BigInt
    rewardPerSecond_not: BigInt
    rewardPerSecond_not_in: [BigInt!]
    rewarder: String
    rewarder_: Rewarder_filter
    rewarder_contains: String
    rewarder_contains_nocase: String
    rewarder_ends_with: String
    rewarder_ends_with_nocase: String
    rewarder_gt: String
    rewarder_gte: String
    rewarder_in: [String!]
    rewarder_lt: String
    rewarder_lte: String
    rewarder_not: String
    rewarder_not_contains: String
    rewarder_not_contains_nocase: String
    rewarder_not_ends_with: String
    rewarder_not_ends_with_nocase: String
    rewarder_not_in: [String!]
    rewarder_not_starts_with: String
    rewarder_not_starts_with_nocase: String
    rewarder_starts_with: String
    rewarder_starts_with_nocase: String
    symbol: String
    symbol_contains: String
    symbol_contains_nocase: String
    symbol_ends_with: String
    symbol_ends_with_nocase: String
    symbol_gt: String
    symbol_gte: String
    symbol_in: [String!]
    symbol_lt: String
    symbol_lte: String
    symbol_not: String
    symbol_not_contains: String
    symbol_not_contains_nocase: String
    symbol_not_ends_with: String
    symbol_not_ends_with_nocase: String
    symbol_not_in: [String!]
    symbol_not_starts_with: String
    symbol_not_starts_with_nocase: String
    symbol_starts_with: String
    symbol_starts_with_nocase: String
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    token: Bytes
    token_contains: Bytes
    token_gt: Bytes
    token_gte: Bytes
    token_in: [Bytes!]
    token_lt: Bytes
    token_lte: Bytes
    token_not: Bytes
    token_not_contains: Bytes
    token_not_in: [Bytes!]
}

enum RewardToken_orderBy {
    block
    decimals
    id
    rewardPerSecond
    rewarder
    rewarder__block
    rewarder__id
    rewarder__timestamp
    symbol
    timestamp
    token
}

type Rewarder {
    block: BigInt!
    id: ID!
    rewardTokens(
        first: Int = 100
        orderBy: RewardToken_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: RewardToken_filter
    ): [RewardToken!]!
    timestamp: BigInt!
}

input Rewarder_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [Rewarder_filter]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [Rewarder_filter]
    rewardTokens_: RewardToken_filter
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
}

enum Rewarder_orderBy {
    block
    id
    rewardTokens
    timestamp
}

type Subscription {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    harvestAction(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): HarvestAction
    harvestActions(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: HarvestAction_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: HarvestAction_filter
    ): [HarvestAction!]!
    masterChef(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): MasterChef
    masterChefs(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: MasterChef_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: MasterChef_filter
    ): [MasterChef!]!
    pool(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Pool
    pools(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Pool_filter
    ): [Pool!]!
    rewardToken(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): RewardToken
    rewardTokens(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: RewardToken_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: RewardToken_filter
    ): [RewardToken!]!
    rewarder(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Rewarder
    rewarders(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Rewarder_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Rewarder_filter
    ): [Rewarder!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
}

"""
A string representation of microseconds UNIX timestamp (16 digits)
"""
scalar Timestamp

type User {
    address: Bytes!
    amount: BigInt!
    beetsHarvested: BigInt!
    block: BigInt!
    harvests(
        first: Int = 100
        orderBy: HarvestAction_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: HarvestAction_filter
    ): [HarvestAction!]!
    id: ID!
    pool: Pool
    rewardDebt: BigInt!
    timestamp: BigInt!
}

input User_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    address: Bytes
    address_contains: Bytes
    address_gt: Bytes
    address_gte: Bytes
    address_in: [Bytes!]
    address_lt: Bytes
    address_lte: Bytes
    address_not: Bytes
    address_not_contains: Bytes
    address_not_in: [Bytes!]
    amount: BigInt
    amount_gt: BigInt
    amount_gte: BigInt
    amount_in: [BigInt!]
    amount_lt: BigInt
    amount_lte: BigInt
    amount_not: BigInt
    amount_not_in: [BigInt!]
    and: [User_filter]
    beetsHarvested: BigInt
    beetsHarvested_gt: BigInt
    beetsHarvested_gte: BigInt
    beetsHarvested_in: [BigInt!]
    beetsHarvested_lt: BigInt
    beetsHarvested_lte: BigInt
    beetsHarvested_not: BigInt
    beetsHarvested_not_in: [BigInt!]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    harvests_: HarvestAction_filter
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [User_filter]
    pool: String
    pool_: Pool_filter
    pool_contains: String
    pool_contains_nocase: String
    pool_ends_with: String
    pool_ends_with_nocase: String
    pool_gt: String
    pool_gte: String
    pool_in: [String!]
    pool_lt: String
    pool_lte: String
    pool_not: String
    pool_not_contains: String
    pool_not_contains_nocase: String
    pool_not_ends_with: String
    pool_not_ends_with_nocase: String
    pool_not_in: [String!]
    pool_not_starts_with: String
    pool_not_starts_with_nocase: String
    pool_starts_with: String
    pool_starts_with_nocase: String
    rewardDebt: BigInt
    rewardDebt_gt: BigInt
    rewardDebt_gte: BigInt
    rewardDebt_in: [BigInt!]
    rewardDebt_lt: BigInt
    rewardDebt_lte: BigInt
    rewardDebt_not: BigInt
    rewardDebt_not_in: [BigInt!]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
}

enum User_orderBy {
    address
    amount
    beetsHarvested
    block
    harvests
    id
    pool
    pool__accBeetsPerShare
    pool__allocPoint
    pool__block
    pool__id
    pool__lastRewardBlock
    pool__pair
    pool__slpBalance
    pool__timestamp
    pool__userCount
    rewardDebt
    timestamp
}

type _Block_ {
    """
    The hash of the block
    """
    hash: Bytes

    """
    The block number
    """
    number: Int!

    """
    The hash of the parent block
    """
    parentHash: Bytes

    """
    Integer representation of the timestamp stored in blocks for the chain
    """
    timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
    """
    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!

    """
    The deployment ID
    """
    deployment: String!

    """
    If `true`, the subgraph encountered indexing errors at some past block
    """
    hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
    """
    Data will be returned even if the subgraph has indexing errors
    """
    allow

    """
    If the subgraph has indexing errors, data will be omitted. The default.
    """
    deny
}
