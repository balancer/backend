"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

enum Aggregation_interval {
    day
    hour
}

type AmpUpdate {
    endAmp: BigInt!
    endTimestamp: BigInt!
    id: ID!
    poolId: Pool!
    scheduledTimestamp: Int!
    startAmp: BigInt!
    startTimestamp: BigInt!
}

input AmpUpdate_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [AmpUpdate_filter]
    endAmp: BigInt
    endAmp_gt: BigInt
    endAmp_gte: BigInt
    endAmp_in: [BigInt!]
    endAmp_lt: BigInt
    endAmp_lte: BigInt
    endAmp_not: BigInt
    endAmp_not_in: [BigInt!]
    endTimestamp: BigInt
    endTimestamp_gt: BigInt
    endTimestamp_gte: BigInt
    endTimestamp_in: [BigInt!]
    endTimestamp_lt: BigInt
    endTimestamp_lte: BigInt
    endTimestamp_not: BigInt
    endTimestamp_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [AmpUpdate_filter]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    scheduledTimestamp: Int
    scheduledTimestamp_gt: Int
    scheduledTimestamp_gte: Int
    scheduledTimestamp_in: [Int!]
    scheduledTimestamp_lt: Int
    scheduledTimestamp_lte: Int
    scheduledTimestamp_not: Int
    scheduledTimestamp_not_in: [Int!]
    startAmp: BigInt
    startAmp_gt: BigInt
    startAmp_gte: BigInt
    startAmp_in: [BigInt!]
    startAmp_lt: BigInt
    startAmp_lte: BigInt
    startAmp_not: BigInt
    startAmp_not_in: [BigInt!]
    startTimestamp: BigInt
    startTimestamp_gt: BigInt
    startTimestamp_gte: BigInt
    startTimestamp_in: [BigInt!]
    startTimestamp_lt: BigInt
    startTimestamp_lte: BigInt
    startTimestamp_not: BigInt
    startTimestamp_not_in: [BigInt!]
}

enum AmpUpdate_orderBy {
    endAmp
    endTimestamp
    id
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    scheduledTimestamp
    startAmp
    startTimestamp
}

type Balancer {
    id: ID!
    poolCount: Int!
    pools(
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: Pool_filter
    ): [Pool!]
    protocolFeesCollector: Bytes
    snapshots(
        first: Int = 100
        orderBy: BalancerSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: BalancerSnapshot_filter
    ): [BalancerSnapshot!]
    totalLiquidity: BigDecimal!
    totalProtocolFee: BigDecimal
    totalSwapCount: BigInt!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
}

type BalancerSnapshot {
    id: ID!
    poolCount: Int!
    timestamp: Int!
    totalLiquidity: BigDecimal!
    totalProtocolFee: BigDecimal
    totalSwapCount: BigInt!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
    vault: Balancer!
}

input BalancerSnapshot_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [BalancerSnapshot_filter]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [BalancerSnapshot_filter]
    poolCount: Int
    poolCount_gt: Int
    poolCount_gte: Int
    poolCount_in: [Int!]
    poolCount_lt: Int
    poolCount_lte: Int
    poolCount_not: Int
    poolCount_not_in: [Int!]
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
    totalLiquidity: BigDecimal
    totalLiquidity_gt: BigDecimal
    totalLiquidity_gte: BigDecimal
    totalLiquidity_in: [BigDecimal!]
    totalLiquidity_lt: BigDecimal
    totalLiquidity_lte: BigDecimal
    totalLiquidity_not: BigDecimal
    totalLiquidity_not_in: [BigDecimal!]
    totalProtocolFee: BigDecimal
    totalProtocolFee_gt: BigDecimal
    totalProtocolFee_gte: BigDecimal
    totalProtocolFee_in: [BigDecimal!]
    totalProtocolFee_lt: BigDecimal
    totalProtocolFee_lte: BigDecimal
    totalProtocolFee_not: BigDecimal
    totalProtocolFee_not_in: [BigDecimal!]
    totalSwapCount: BigInt
    totalSwapCount_gt: BigInt
    totalSwapCount_gte: BigInt
    totalSwapCount_in: [BigInt!]
    totalSwapCount_lt: BigInt
    totalSwapCount_lte: BigInt
    totalSwapCount_not: BigInt
    totalSwapCount_not_in: [BigInt!]
    totalSwapFee: BigDecimal
    totalSwapFee_gt: BigDecimal
    totalSwapFee_gte: BigDecimal
    totalSwapFee_in: [BigDecimal!]
    totalSwapFee_lt: BigDecimal
    totalSwapFee_lte: BigDecimal
    totalSwapFee_not: BigDecimal
    totalSwapFee_not_in: [BigDecimal!]
    totalSwapVolume: BigDecimal
    totalSwapVolume_gt: BigDecimal
    totalSwapVolume_gte: BigDecimal
    totalSwapVolume_in: [BigDecimal!]
    totalSwapVolume_lt: BigDecimal
    totalSwapVolume_lte: BigDecimal
    totalSwapVolume_not: BigDecimal
    totalSwapVolume_not_in: [BigDecimal!]
    vault: String
    vault_: Balancer_filter
    vault_contains: String
    vault_contains_nocase: String
    vault_ends_with: String
    vault_ends_with_nocase: String
    vault_gt: String
    vault_gte: String
    vault_in: [String!]
    vault_lt: String
    vault_lte: String
    vault_not: String
    vault_not_contains: String
    vault_not_contains_nocase: String
    vault_not_ends_with: String
    vault_not_ends_with_nocase: String
    vault_not_in: [String!]
    vault_not_starts_with: String
    vault_not_starts_with_nocase: String
    vault_starts_with: String
    vault_starts_with_nocase: String
}

enum BalancerSnapshot_orderBy {
    id
    poolCount
    timestamp
    totalLiquidity
    totalProtocolFee
    totalSwapCount
    totalSwapFee
    totalSwapVolume
    vault
    vault__id
    vault__poolCount
    vault__protocolFeesCollector
    vault__totalLiquidity
    vault__totalProtocolFee
    vault__totalSwapCount
    vault__totalSwapFee
    vault__totalSwapVolume
}

input Balancer_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [Balancer_filter]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [Balancer_filter]
    poolCount: Int
    poolCount_gt: Int
    poolCount_gte: Int
    poolCount_in: [Int!]
    poolCount_lt: Int
    poolCount_lte: Int
    poolCount_not: Int
    poolCount_not_in: [Int!]
    pools_: Pool_filter
    protocolFeesCollector: Bytes
    protocolFeesCollector_contains: Bytes
    protocolFeesCollector_gt: Bytes
    protocolFeesCollector_gte: Bytes
    protocolFeesCollector_in: [Bytes!]
    protocolFeesCollector_lt: Bytes
    protocolFeesCollector_lte: Bytes
    protocolFeesCollector_not: Bytes
    protocolFeesCollector_not_contains: Bytes
    protocolFeesCollector_not_in: [Bytes!]
    snapshots_: BalancerSnapshot_filter
    totalLiquidity: BigDecimal
    totalLiquidity_gt: BigDecimal
    totalLiquidity_gte: BigDecimal
    totalLiquidity_in: [BigDecimal!]
    totalLiquidity_lt: BigDecimal
    totalLiquidity_lte: BigDecimal
    totalLiquidity_not: BigDecimal
    totalLiquidity_not_in: [BigDecimal!]
    totalProtocolFee: BigDecimal
    totalProtocolFee_gt: BigDecimal
    totalProtocolFee_gte: BigDecimal
    totalProtocolFee_in: [BigDecimal!]
    totalProtocolFee_lt: BigDecimal
    totalProtocolFee_lte: BigDecimal
    totalProtocolFee_not: BigDecimal
    totalProtocolFee_not_in: [BigDecimal!]
    totalSwapCount: BigInt
    totalSwapCount_gt: BigInt
    totalSwapCount_gte: BigInt
    totalSwapCount_in: [BigInt!]
    totalSwapCount_lt: BigInt
    totalSwapCount_lte: BigInt
    totalSwapCount_not: BigInt
    totalSwapCount_not_in: [BigInt!]
    totalSwapFee: BigDecimal
    totalSwapFee_gt: BigDecimal
    totalSwapFee_gte: BigDecimal
    totalSwapFee_in: [BigDecimal!]
    totalSwapFee_lt: BigDecimal
    totalSwapFee_lte: BigDecimal
    totalSwapFee_not: BigDecimal
    totalSwapFee_not_in: [BigDecimal!]
    totalSwapVolume: BigDecimal
    totalSwapVolume_gt: BigDecimal
    totalSwapVolume_gte: BigDecimal
    totalSwapVolume_in: [BigDecimal!]
    totalSwapVolume_lt: BigDecimal
    totalSwapVolume_lte: BigDecimal
    totalSwapVolume_not: BigDecimal
    totalSwapVolume_not_in: [BigDecimal!]
}

enum Balancer_orderBy {
    id
    poolCount
    pools
    protocolFeesCollector
    snapshots
    totalLiquidity
    totalProtocolFee
    totalSwapCount
    totalSwapFee
    totalSwapVolume
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
    number_gte: Int!
}

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

scalar Bytes

type CircuitBreaker {
    bptPrice: BigDecimal!
    id: ID!
    lowerBoundPercentage: BigDecimal!
    pool: Pool!
    token: PoolToken!
    upperBoundPercentage: BigDecimal!
}

input CircuitBreaker_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [CircuitBreaker_filter]
    bptPrice: BigDecimal
    bptPrice_gt: BigDecimal
    bptPrice_gte: BigDecimal
    bptPrice_in: [BigDecimal!]
    bptPrice_lt: BigDecimal
    bptPrice_lte: BigDecimal
    bptPrice_not: BigDecimal
    bptPrice_not_in: [BigDecimal!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    lowerBoundPercentage: BigDecimal
    lowerBoundPercentage_gt: BigDecimal
    lowerBoundPercentage_gte: BigDecimal
    lowerBoundPercentage_in: [BigDecimal!]
    lowerBoundPercentage_lt: BigDecimal
    lowerBoundPercentage_lte: BigDecimal
    lowerBoundPercentage_not: BigDecimal
    lowerBoundPercentage_not_in: [BigDecimal!]
    or: [CircuitBreaker_filter]
    pool: String
    pool_: Pool_filter
    pool_contains: String
    pool_contains_nocase: String
    pool_ends_with: String
    pool_ends_with_nocase: String
    pool_gt: String
    pool_gte: String
    pool_in: [String!]
    pool_lt: String
    pool_lte: String
    pool_not: String
    pool_not_contains: String
    pool_not_contains_nocase: String
    pool_not_ends_with: String
    pool_not_ends_with_nocase: String
    pool_not_in: [String!]
    pool_not_starts_with: String
    pool_not_starts_with_nocase: String
    pool_starts_with: String
    pool_starts_with_nocase: String
    token: String
    token_: PoolToken_filter
    token_contains: String
    token_contains_nocase: String
    token_ends_with: String
    token_ends_with_nocase: String
    token_gt: String
    token_gte: String
    token_in: [String!]
    token_lt: String
    token_lte: String
    token_not: String
    token_not_contains: String
    token_not_contains_nocase: String
    token_not_ends_with: String
    token_not_ends_with_nocase: String
    token_not_in: [String!]
    token_not_starts_with: String
    token_not_starts_with_nocase: String
    token_starts_with: String
    token_starts_with_nocase: String
    upperBoundPercentage: BigDecimal
    upperBoundPercentage_gt: BigDecimal
    upperBoundPercentage_gte: BigDecimal
    upperBoundPercentage_in: [BigDecimal!]
    upperBoundPercentage_lt: BigDecimal
    upperBoundPercentage_lte: BigDecimal
    upperBoundPercentage_not: BigDecimal
    upperBoundPercentage_not_in: [BigDecimal!]
}

enum CircuitBreaker_orderBy {
    bptPrice
    id
    lowerBoundPercentage
    pool
    pool__address
    pool__alpha
    pool__amp
    pool__baseToken
    pool__beta
    pool__c
    pool__createTime
    pool__dSq
    pool__delta
    pool__epsilon
    pool__expiryTime
    pool__factory
    pool__holdersCount
    pool__id
    pool__isInRecoveryMode
    pool__isPaused
    pool__joinExitEnabled
    pool__lambda
    pool__lastJoinExitAmp
    pool__lastPostJoinExitInvariant
    pool__lowerTarget
    pool__mainIndex
    pool__managementAumFee
    pool__managementFee
    pool__mustAllowlistLPs
    pool__name
    pool__oracleEnabled
    pool__owner
    pool__poolType
    pool__poolTypeVersion
    pool__principalToken
    pool__protocolAumFeeCache
    pool__protocolId
    pool__protocolSwapFeeCache
    pool__protocolYieldFeeCache
    pool__root3Alpha
    pool__s
    pool__sqrtAlpha
    pool__sqrtBeta
    pool__strategyType
    pool__swapEnabled
    pool__swapEnabledCurationSignal
    pool__swapEnabledInternal
    pool__swapFee
    pool__swapsCount
    pool__symbol
    pool__tauAlphaX
    pool__tauAlphaY
    pool__tauBetaX
    pool__tauBetaY
    pool__totalAumFeeCollectedInBPT
    pool__totalLiquidity
    pool__totalLiquiditySansBPT
    pool__totalProtocolFee
    pool__totalProtocolFeePaidInBPT
    pool__totalShares
    pool__totalSwapFee
    pool__totalSwapVolume
    pool__totalWeight
    pool__tx
    pool__u
    pool__unitSeconds
    pool__upperTarget
    pool__v
    pool__w
    pool__wrappedIndex
    pool__z
    token
    token__address
    token__assetManager
    token__balance
    token__cashBalance
    token__decimals
    token__id
    token__index
    token__isExemptFromYieldProtocolFee
    token__managedBalance
    token__name
    token__oldPriceRate
    token__paidProtocolFees
    token__priceRate
    token__symbol
    token__weight
    upperBoundPercentage
}

type FXOracle {
    decimals: Int
    divisor: String
    id: ID!
    tokens: [Bytes!]!
}

input FXOracle_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [FXOracle_filter]
    decimals: Int
    decimals_gt: Int
    decimals_gte: Int
    decimals_in: [Int!]
    decimals_lt: Int
    decimals_lte: Int
    decimals_not: Int
    decimals_not_in: [Int!]
    divisor: String
    divisor_contains: String
    divisor_contains_nocase: String
    divisor_ends_with: String
    divisor_ends_with_nocase: String
    divisor_gt: String
    divisor_gte: String
    divisor_in: [String!]
    divisor_lt: String
    divisor_lte: String
    divisor_not: String
    divisor_not_contains: String
    divisor_not_contains_nocase: String
    divisor_not_ends_with: String
    divisor_not_ends_with_nocase: String
    divisor_not_in: [String!]
    divisor_not_starts_with: String
    divisor_not_starts_with_nocase: String
    divisor_starts_with: String
    divisor_starts_with_nocase: String
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [FXOracle_filter]
    tokens: [Bytes!]
    tokens_contains: [Bytes!]
    tokens_contains_nocase: [Bytes!]
    tokens_not: [Bytes!]
    tokens_not_contains: [Bytes!]
    tokens_not_contains_nocase: [Bytes!]
}

enum FXOracle_orderBy {
    decimals
    divisor
    id
    tokens
}

type GradualWeightUpdate {
    endTimestamp: BigInt!
    endWeights: [BigInt!]!
    id: ID!
    poolId: Pool!
    scheduledTimestamp: Int!
    startTimestamp: BigInt!
    startWeights: [BigInt!]!
}

input GradualWeightUpdate_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [GradualWeightUpdate_filter]
    endTimestamp: BigInt
    endTimestamp_gt: BigInt
    endTimestamp_gte: BigInt
    endTimestamp_in: [BigInt!]
    endTimestamp_lt: BigInt
    endTimestamp_lte: BigInt
    endTimestamp_not: BigInt
    endTimestamp_not_in: [BigInt!]
    endWeights: [BigInt!]
    endWeights_contains: [BigInt!]
    endWeights_contains_nocase: [BigInt!]
    endWeights_not: [BigInt!]
    endWeights_not_contains: [BigInt!]
    endWeights_not_contains_nocase: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [GradualWeightUpdate_filter]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    scheduledTimestamp: Int
    scheduledTimestamp_gt: Int
    scheduledTimestamp_gte: Int
    scheduledTimestamp_in: [Int!]
    scheduledTimestamp_lt: Int
    scheduledTimestamp_lte: Int
    scheduledTimestamp_not: Int
    scheduledTimestamp_not_in: [Int!]
    startTimestamp: BigInt
    startTimestamp_gt: BigInt
    startTimestamp_gte: BigInt
    startTimestamp_in: [BigInt!]
    startTimestamp_lt: BigInt
    startTimestamp_lte: BigInt
    startTimestamp_not: BigInt
    startTimestamp_not_in: [BigInt!]
    startWeights: [BigInt!]
    startWeights_contains: [BigInt!]
    startWeights_contains_nocase: [BigInt!]
    startWeights_not: [BigInt!]
    startWeights_not_contains: [BigInt!]
    startWeights_not_contains_nocase: [BigInt!]
}

enum GradualWeightUpdate_orderBy {
    endTimestamp
    endWeights
    id
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    scheduledTimestamp
    startTimestamp
    startWeights
}

"""
8 bytes signed integer
"""
scalar Int8

enum InvestType {
    Exit
    Join
}

type JoinExit {
    amounts: [BigDecimal!]!
    block: BigInt
    id: ID!
    pool: Pool!
    sender: Bytes!
    timestamp: Int!
    tx: Bytes!
    type: InvestType!
    user: User!
    valueUSD: BigDecimal
}

input JoinExit_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    amounts: [BigDecimal!]
    amounts_contains: [BigDecimal!]
    amounts_contains_nocase: [BigDecimal!]
    amounts_not: [BigDecimal!]
    amounts_not_contains: [BigDecimal!]
    amounts_not_contains_nocase: [BigDecimal!]
    and: [JoinExit_filter]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [JoinExit_filter]
    pool: String
    pool_: Pool_filter
    pool_contains: String
    pool_contains_nocase: String
    pool_ends_with: String
    pool_ends_with_nocase: String
    pool_gt: String
    pool_gte: String
    pool_in: [String!]
    pool_lt: String
    pool_lte: String
    pool_not: String
    pool_not_contains: String
    pool_not_contains_nocase: String
    pool_not_ends_with: String
    pool_not_ends_with_nocase: String
    pool_not_in: [String!]
    pool_not_starts_with: String
    pool_not_starts_with_nocase: String
    pool_starts_with: String
    pool_starts_with_nocase: String
    sender: Bytes
    sender_contains: Bytes
    sender_gt: Bytes
    sender_gte: Bytes
    sender_in: [Bytes!]
    sender_lt: Bytes
    sender_lte: Bytes
    sender_not: Bytes
    sender_not_contains: Bytes
    sender_not_in: [Bytes!]
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
    tx: Bytes
    tx_contains: Bytes
    tx_gt: Bytes
    tx_gte: Bytes
    tx_in: [Bytes!]
    tx_lt: Bytes
    tx_lte: Bytes
    tx_not: Bytes
    tx_not_contains: Bytes
    tx_not_in: [Bytes!]
    type: InvestType
    type_in: [InvestType!]
    type_not: InvestType
    type_not_in: [InvestType!]
    user: String
    user_: User_filter
    user_contains: String
    user_contains_nocase: String
    user_ends_with: String
    user_ends_with_nocase: String
    user_gt: String
    user_gte: String
    user_in: [String!]
    user_lt: String
    user_lte: String
    user_not: String
    user_not_contains: String
    user_not_contains_nocase: String
    user_not_ends_with: String
    user_not_ends_with_nocase: String
    user_not_in: [String!]
    user_not_starts_with: String
    user_not_starts_with_nocase: String
    user_starts_with: String
    user_starts_with_nocase: String
    valueUSD: BigDecimal
    valueUSD_gt: BigDecimal
    valueUSD_gte: BigDecimal
    valueUSD_in: [BigDecimal!]
    valueUSD_lt: BigDecimal
    valueUSD_lte: BigDecimal
    valueUSD_not: BigDecimal
    valueUSD_not_in: [BigDecimal!]
}

enum JoinExit_orderBy {
    amounts
    block
    id
    pool
    pool__address
    pool__alpha
    pool__amp
    pool__baseToken
    pool__beta
    pool__c
    pool__createTime
    pool__dSq
    pool__delta
    pool__epsilon
    pool__expiryTime
    pool__factory
    pool__holdersCount
    pool__id
    pool__isInRecoveryMode
    pool__isPaused
    pool__joinExitEnabled
    pool__lambda
    pool__lastJoinExitAmp
    pool__lastPostJoinExitInvariant
    pool__lowerTarget
    pool__mainIndex
    pool__managementAumFee
    pool__managementFee
    pool__mustAllowlistLPs
    pool__name
    pool__oracleEnabled
    pool__owner
    pool__poolType
    pool__poolTypeVersion
    pool__principalToken
    pool__protocolAumFeeCache
    pool__protocolId
    pool__protocolSwapFeeCache
    pool__protocolYieldFeeCache
    pool__root3Alpha
    pool__s
    pool__sqrtAlpha
    pool__sqrtBeta
    pool__strategyType
    pool__swapEnabled
    pool__swapEnabledCurationSignal
    pool__swapEnabledInternal
    pool__swapFee
    pool__swapsCount
    pool__symbol
    pool__tauAlphaX
    pool__tauAlphaY
    pool__tauBetaX
    pool__tauBetaY
    pool__totalAumFeeCollectedInBPT
    pool__totalLiquidity
    pool__totalLiquiditySansBPT
    pool__totalProtocolFee
    pool__totalProtocolFeePaidInBPT
    pool__totalShares
    pool__totalSwapFee
    pool__totalSwapVolume
    pool__totalWeight
    pool__tx
    pool__u
    pool__unitSeconds
    pool__upperTarget
    pool__v
    pool__w
    pool__wrappedIndex
    pool__z
    sender
    timestamp
    tx
    type
    user
    user__id
    valueUSD
}

type LatestPrice {
    asset: Bytes!
    block: BigInt!
    id: ID!
    poolId: Pool!
    price: BigDecimal!
    pricingAsset: Bytes!
}

input LatestPrice_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [LatestPrice_filter]
    asset: Bytes
    asset_contains: Bytes
    asset_gt: Bytes
    asset_gte: Bytes
    asset_in: [Bytes!]
    asset_lt: Bytes
    asset_lte: Bytes
    asset_not: Bytes
    asset_not_contains: Bytes
    asset_not_in: [Bytes!]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [LatestPrice_filter]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    price: BigDecimal
    price_gt: BigDecimal
    price_gte: BigDecimal
    price_in: [BigDecimal!]
    price_lt: BigDecimal
    price_lte: BigDecimal
    price_not: BigDecimal
    price_not_in: [BigDecimal!]
    pricingAsset: Bytes
    pricingAsset_contains: Bytes
    pricingAsset_gt: Bytes
    pricingAsset_gte: Bytes
    pricingAsset_in: [Bytes!]
    pricingAsset_lt: Bytes
    pricingAsset_lte: Bytes
    pricingAsset_not: Bytes
    pricingAsset_not_contains: Bytes
    pricingAsset_not_in: [Bytes!]
}

enum LatestPrice_orderBy {
    asset
    block
    id
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    price
    pricingAsset
}

type ManagementOperation {
    cashDelta: BigDecimal!
    id: ID!
    managedDelta: BigDecimal!
    poolTokenId: PoolToken!
    timestamp: Int!
    type: OperationType!
}

input ManagementOperation_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [ManagementOperation_filter]
    cashDelta: BigDecimal
    cashDelta_gt: BigDecimal
    cashDelta_gte: BigDecimal
    cashDelta_in: [BigDecimal!]
    cashDelta_lt: BigDecimal
    cashDelta_lte: BigDecimal
    cashDelta_not: BigDecimal
    cashDelta_not_in: [BigDecimal!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    managedDelta: BigDecimal
    managedDelta_gt: BigDecimal
    managedDelta_gte: BigDecimal
    managedDelta_in: [BigDecimal!]
    managedDelta_lt: BigDecimal
    managedDelta_lte: BigDecimal
    managedDelta_not: BigDecimal
    managedDelta_not_in: [BigDecimal!]
    or: [ManagementOperation_filter]
    poolTokenId: String
    poolTokenId_: PoolToken_filter
    poolTokenId_contains: String
    poolTokenId_contains_nocase: String
    poolTokenId_ends_with: String
    poolTokenId_ends_with_nocase: String
    poolTokenId_gt: String
    poolTokenId_gte: String
    poolTokenId_in: [String!]
    poolTokenId_lt: String
    poolTokenId_lte: String
    poolTokenId_not: String
    poolTokenId_not_contains: String
    poolTokenId_not_contains_nocase: String
    poolTokenId_not_ends_with: String
    poolTokenId_not_ends_with_nocase: String
    poolTokenId_not_in: [String!]
    poolTokenId_not_starts_with: String
    poolTokenId_not_starts_with_nocase: String
    poolTokenId_starts_with: String
    poolTokenId_starts_with_nocase: String
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
    type: OperationType
    type_in: [OperationType!]
    type_not: OperationType
    type_not_in: [OperationType!]
}

enum ManagementOperation_orderBy {
    cashDelta
    id
    managedDelta
    poolTokenId
    poolTokenId__address
    poolTokenId__assetManager
    poolTokenId__balance
    poolTokenId__cashBalance
    poolTokenId__decimals
    poolTokenId__id
    poolTokenId__index
    poolTokenId__isExemptFromYieldProtocolFee
    poolTokenId__managedBalance
    poolTokenId__name
    poolTokenId__oldPriceRate
    poolTokenId__paidProtocolFees
    poolTokenId__priceRate
    poolTokenId__symbol
    poolTokenId__weight
    timestamp
    type
}

enum OperationType {
    Deposit
    Update
    Withdraw
}

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
    asc
    desc
}

type Pool {
    address: Bytes!
    alpha: BigDecimal
    amp: BigInt
    ampUpdates(
        first: Int = 100
        orderBy: AmpUpdate_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: AmpUpdate_filter
    ): [AmpUpdate!]
    baseToken: Bytes
    beta: BigDecimal
    c: BigDecimal
    circuitBreakers(
        first: Int = 100
        orderBy: CircuitBreaker_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: CircuitBreaker_filter
    ): [CircuitBreaker!]
    createTime: Int!
    dSq: BigDecimal
    delta: BigDecimal
    epsilon: BigDecimal
    expiryTime: BigInt
    factory: Bytes
    historicalValues(
        first: Int = 100
        orderBy: PoolHistoricalLiquidity_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: PoolHistoricalLiquidity_filter
    ): [PoolHistoricalLiquidity!]
    holdersCount: BigInt!
    id: ID!
    isInRecoveryMode: Boolean
    isPaused: Boolean
    joinExitEnabled: Boolean
    joinsExits(
        first: Int = 100
        orderBy: JoinExit_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: JoinExit_filter
    ): [JoinExit!]
    lambda: BigDecimal
    lastJoinExitAmp: BigInt
    lastPostJoinExitInvariant: BigDecimal
    latestAmpUpdate: AmpUpdate
    lowerTarget: BigDecimal
    mainIndex: Int
    managementAumFee: BigDecimal
    managementFee: BigDecimal
    mustAllowlistLPs: Boolean
    name: String
    oracleEnabled: Boolean!
    owner: Bytes
    poolType: String
    poolTypeVersion: Int
    priceRateProviders(
        first: Int = 100
        orderBy: PriceRateProvider_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: PriceRateProvider_filter
    ): [PriceRateProvider!]
    principalToken: Bytes
    protocolAumFeeCache: BigDecimal
    protocolId: Int
    protocolIdData: ProtocolIdData
    protocolSwapFeeCache: BigDecimal
    protocolYieldFeeCache: BigDecimal
    root3Alpha: BigDecimal
    s: BigDecimal
    shares(
        first: Int = 100
        orderBy: PoolShare_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: PoolShare_filter
    ): [PoolShare!]
    snapshots(
        first: Int = 100
        orderBy: PoolSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: PoolSnapshot_filter
    ): [PoolSnapshot!]
    sqrtAlpha: BigDecimal
    sqrtBeta: BigDecimal
    strategyType: Int!

    """
    Indicates if a pool can be swapped against. Combines multiple sources, including offchain curation
    """
    swapEnabled: Boolean!

    """
    External indication from an offchain permissioned actor
    """
    swapEnabledCurationSignal: Boolean

    """
    The native swapEnabled boolean. internal to the pool. Only applies to Gyro, LBPs and InvestmentPools
    """
    swapEnabledInternal: Boolean
    swapFee: BigDecimal!
    swaps(
        first: Int = 100
        orderBy: Swap_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: Swap_filter
    ): [Swap!]
    swapsCount: BigInt!
    symbol: String
    tauAlphaX: BigDecimal
    tauAlphaY: BigDecimal
    tauBetaX: BigDecimal
    tauBetaY: BigDecimal
    tokens(
        first: Int = 100
        orderBy: PoolToken_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: PoolToken_filter
    ): [PoolToken!]
    tokensList: [Bytes!]!
    totalAumFeeCollectedInBPT: BigDecimal
    totalLiquidity: BigDecimal!
    totalLiquiditySansBPT: BigDecimal
    totalProtocolFee: BigDecimal
    totalProtocolFeePaidInBPT: BigDecimal
    totalShares: BigDecimal!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
    totalWeight: BigDecimal
    tx: Bytes
    u: BigDecimal
    unitSeconds: BigInt
    upperTarget: BigDecimal
    v: BigDecimal
    vaultID: Balancer!
    w: BigDecimal
    weightUpdates(
        first: Int = 100
        orderBy: GradualWeightUpdate_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: GradualWeightUpdate_filter
    ): [GradualWeightUpdate!]
    wrappedIndex: Int
    z: BigDecimal
}

type PoolContract {
    id: ID!
    pool: Pool!
}

input PoolContract_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [PoolContract_filter]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [PoolContract_filter]
    pool: String
    pool_: Pool_filter
    pool_contains: String
    pool_contains_nocase: String
    pool_ends_with: String
    pool_ends_with_nocase: String
    pool_gt: String
    pool_gte: String
    pool_in: [String!]
    pool_lt: String
    pool_lte: String
    pool_not: String
    pool_not_contains: String
    pool_not_contains_nocase: String
    pool_not_ends_with: String
    pool_not_ends_with_nocase: String
    pool_not_in: [String!]
    pool_not_starts_with: String
    pool_not_starts_with_nocase: String
    pool_starts_with: String
    pool_starts_with_nocase: String
}

enum PoolContract_orderBy {
    id
    pool
    pool__address
    pool__alpha
    pool__amp
    pool__baseToken
    pool__beta
    pool__c
    pool__createTime
    pool__dSq
    pool__delta
    pool__epsilon
    pool__expiryTime
    pool__factory
    pool__holdersCount
    pool__id
    pool__isInRecoveryMode
    pool__isPaused
    pool__joinExitEnabled
    pool__lambda
    pool__lastJoinExitAmp
    pool__lastPostJoinExitInvariant
    pool__lowerTarget
    pool__mainIndex
    pool__managementAumFee
    pool__managementFee
    pool__mustAllowlistLPs
    pool__name
    pool__oracleEnabled
    pool__owner
    pool__poolType
    pool__poolTypeVersion
    pool__principalToken
    pool__protocolAumFeeCache
    pool__protocolId
    pool__protocolSwapFeeCache
    pool__protocolYieldFeeCache
    pool__root3Alpha
    pool__s
    pool__sqrtAlpha
    pool__sqrtBeta
    pool__strategyType
    pool__swapEnabled
    pool__swapEnabledCurationSignal
    pool__swapEnabledInternal
    pool__swapFee
    pool__swapsCount
    pool__symbol
    pool__tauAlphaX
    pool__tauAlphaY
    pool__tauBetaX
    pool__tauBetaY
    pool__totalAumFeeCollectedInBPT
    pool__totalLiquidity
    pool__totalLiquiditySansBPT
    pool__totalProtocolFee
    pool__totalProtocolFeePaidInBPT
    pool__totalShares
    pool__totalSwapFee
    pool__totalSwapVolume
    pool__totalWeight
    pool__tx
    pool__u
    pool__unitSeconds
    pool__upperTarget
    pool__v
    pool__w
    pool__wrappedIndex
    pool__z
}

type PoolHistoricalLiquidity {
    block: BigInt!
    id: ID!
    poolId: Pool!
    poolLiquidity: BigDecimal!
    poolShareValue: BigDecimal!
    poolTotalShares: BigDecimal!
    pricingAsset: Bytes!
}

input PoolHistoricalLiquidity_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [PoolHistoricalLiquidity_filter]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [PoolHistoricalLiquidity_filter]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    poolLiquidity: BigDecimal
    poolLiquidity_gt: BigDecimal
    poolLiquidity_gte: BigDecimal
    poolLiquidity_in: [BigDecimal!]
    poolLiquidity_lt: BigDecimal
    poolLiquidity_lte: BigDecimal
    poolLiquidity_not: BigDecimal
    poolLiquidity_not_in: [BigDecimal!]
    poolShareValue: BigDecimal
    poolShareValue_gt: BigDecimal
    poolShareValue_gte: BigDecimal
    poolShareValue_in: [BigDecimal!]
    poolShareValue_lt: BigDecimal
    poolShareValue_lte: BigDecimal
    poolShareValue_not: BigDecimal
    poolShareValue_not_in: [BigDecimal!]
    poolTotalShares: BigDecimal
    poolTotalShares_gt: BigDecimal
    poolTotalShares_gte: BigDecimal
    poolTotalShares_in: [BigDecimal!]
    poolTotalShares_lt: BigDecimal
    poolTotalShares_lte: BigDecimal
    poolTotalShares_not: BigDecimal
    poolTotalShares_not_in: [BigDecimal!]
    pricingAsset: Bytes
    pricingAsset_contains: Bytes
    pricingAsset_gt: Bytes
    pricingAsset_gte: Bytes
    pricingAsset_in: [Bytes!]
    pricingAsset_lt: Bytes
    pricingAsset_lte: Bytes
    pricingAsset_not: Bytes
    pricingAsset_not_contains: Bytes
    pricingAsset_not_in: [Bytes!]
}

enum PoolHistoricalLiquidity_orderBy {
    block
    id
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    poolLiquidity
    poolShareValue
    poolTotalShares
    pricingAsset
}

type PoolShare {
    balance: BigDecimal!
    id: ID!
    poolId: Pool!
    userAddress: User!
}

input PoolShare_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [PoolShare_filter]
    balance: BigDecimal
    balance_gt: BigDecimal
    balance_gte: BigDecimal
    balance_in: [BigDecimal!]
    balance_lt: BigDecimal
    balance_lte: BigDecimal
    balance_not: BigDecimal
    balance_not_in: [BigDecimal!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [PoolShare_filter]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    userAddress: String
    userAddress_: User_filter
    userAddress_contains: String
    userAddress_contains_nocase: String
    userAddress_ends_with: String
    userAddress_ends_with_nocase: String
    userAddress_gt: String
    userAddress_gte: String
    userAddress_in: [String!]
    userAddress_lt: String
    userAddress_lte: String
    userAddress_not: String
    userAddress_not_contains: String
    userAddress_not_contains_nocase: String
    userAddress_not_ends_with: String
    userAddress_not_ends_with_nocase: String
    userAddress_not_in: [String!]
    userAddress_not_starts_with: String
    userAddress_not_starts_with_nocase: String
    userAddress_starts_with: String
    userAddress_starts_with_nocase: String
}

enum PoolShare_orderBy {
    balance
    id
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    userAddress
    userAddress__id
}

type PoolSnapshot {
    amounts: [BigDecimal!]!
    holdersCount: BigInt!
    id: ID!
    liquidity: BigDecimal!
    pool: Pool!
    protocolFee: BigDecimal
    swapFees: BigDecimal!
    swapVolume: BigDecimal!
    swapsCount: BigInt!
    timestamp: Int!
    totalShares: BigDecimal!
}

input PoolSnapshot_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    amounts: [BigDecimal!]
    amounts_contains: [BigDecimal!]
    amounts_contains_nocase: [BigDecimal!]
    amounts_not: [BigDecimal!]
    amounts_not_contains: [BigDecimal!]
    amounts_not_contains_nocase: [BigDecimal!]
    and: [PoolSnapshot_filter]
    holdersCount: BigInt
    holdersCount_gt: BigInt
    holdersCount_gte: BigInt
    holdersCount_in: [BigInt!]
    holdersCount_lt: BigInt
    holdersCount_lte: BigInt
    holdersCount_not: BigInt
    holdersCount_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    liquidity: BigDecimal
    liquidity_gt: BigDecimal
    liquidity_gte: BigDecimal
    liquidity_in: [BigDecimal!]
    liquidity_lt: BigDecimal
    liquidity_lte: BigDecimal
    liquidity_not: BigDecimal
    liquidity_not_in: [BigDecimal!]
    or: [PoolSnapshot_filter]
    pool: String
    pool_: Pool_filter
    pool_contains: String
    pool_contains_nocase: String
    pool_ends_with: String
    pool_ends_with_nocase: String
    pool_gt: String
    pool_gte: String
    pool_in: [String!]
    pool_lt: String
    pool_lte: String
    pool_not: String
    pool_not_contains: String
    pool_not_contains_nocase: String
    pool_not_ends_with: String
    pool_not_ends_with_nocase: String
    pool_not_in: [String!]
    pool_not_starts_with: String
    pool_not_starts_with_nocase: String
    pool_starts_with: String
    pool_starts_with_nocase: String
    protocolFee: BigDecimal
    protocolFee_gt: BigDecimal
    protocolFee_gte: BigDecimal
    protocolFee_in: [BigDecimal!]
    protocolFee_lt: BigDecimal
    protocolFee_lte: BigDecimal
    protocolFee_not: BigDecimal
    protocolFee_not_in: [BigDecimal!]
    swapFees: BigDecimal
    swapFees_gt: BigDecimal
    swapFees_gte: BigDecimal
    swapFees_in: [BigDecimal!]
    swapFees_lt: BigDecimal
    swapFees_lte: BigDecimal
    swapFees_not: BigDecimal
    swapFees_not_in: [BigDecimal!]
    swapVolume: BigDecimal
    swapVolume_gt: BigDecimal
    swapVolume_gte: BigDecimal
    swapVolume_in: [BigDecimal!]
    swapVolume_lt: BigDecimal
    swapVolume_lte: BigDecimal
    swapVolume_not: BigDecimal
    swapVolume_not_in: [BigDecimal!]
    swapsCount: BigInt
    swapsCount_gt: BigInt
    swapsCount_gte: BigInt
    swapsCount_in: [BigInt!]
    swapsCount_lt: BigInt
    swapsCount_lte: BigInt
    swapsCount_not: BigInt
    swapsCount_not_in: [BigInt!]
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
    totalShares: BigDecimal
    totalShares_gt: BigDecimal
    totalShares_gte: BigDecimal
    totalShares_in: [BigDecimal!]
    totalShares_lt: BigDecimal
    totalShares_lte: BigDecimal
    totalShares_not: BigDecimal
    totalShares_not_in: [BigDecimal!]
}

enum PoolSnapshot_orderBy {
    amounts
    holdersCount
    id
    liquidity
    pool
    pool__address
    pool__alpha
    pool__amp
    pool__baseToken
    pool__beta
    pool__c
    pool__createTime
    pool__dSq
    pool__delta
    pool__epsilon
    pool__expiryTime
    pool__factory
    pool__holdersCount
    pool__id
    pool__isInRecoveryMode
    pool__isPaused
    pool__joinExitEnabled
    pool__lambda
    pool__lastJoinExitAmp
    pool__lastPostJoinExitInvariant
    pool__lowerTarget
    pool__mainIndex
    pool__managementAumFee
    pool__managementFee
    pool__mustAllowlistLPs
    pool__name
    pool__oracleEnabled
    pool__owner
    pool__poolType
    pool__poolTypeVersion
    pool__principalToken
    pool__protocolAumFeeCache
    pool__protocolId
    pool__protocolSwapFeeCache
    pool__protocolYieldFeeCache
    pool__root3Alpha
    pool__s
    pool__sqrtAlpha
    pool__sqrtBeta
    pool__strategyType
    pool__swapEnabled
    pool__swapEnabledCurationSignal
    pool__swapEnabledInternal
    pool__swapFee
    pool__swapsCount
    pool__symbol
    pool__tauAlphaX
    pool__tauAlphaY
    pool__tauBetaX
    pool__tauBetaY
    pool__totalAumFeeCollectedInBPT
    pool__totalLiquidity
    pool__totalLiquiditySansBPT
    pool__totalProtocolFee
    pool__totalProtocolFeePaidInBPT
    pool__totalShares
    pool__totalSwapFee
    pool__totalSwapVolume
    pool__totalWeight
    pool__tx
    pool__u
    pool__unitSeconds
    pool__upperTarget
    pool__v
    pool__w
    pool__wrappedIndex
    pool__z
    protocolFee
    swapFees
    swapVolume
    swapsCount
    timestamp
    totalShares
}

type PoolToken {
    address: String!
    assetManager: Bytes!
    balance: BigDecimal!
    cashBalance: BigDecimal!
    circuitBreaker: CircuitBreaker
    decimals: Int!
    id: ID!
    index: Int
    isExemptFromYieldProtocolFee: Boolean
    managedBalance: BigDecimal!
    managements(
        first: Int = 100
        orderBy: ManagementOperation_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: ManagementOperation_filter
    ): [ManagementOperation!]
    name: String!
    oldPriceRate: BigDecimal
    paidProtocolFees: BigDecimal
    poolId: Pool
    priceRate: BigDecimal!
    symbol: String!
    token: Token!
    weight: BigDecimal
}

input PoolToken_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    address: String
    address_contains: String
    address_contains_nocase: String
    address_ends_with: String
    address_ends_with_nocase: String
    address_gt: String
    address_gte: String
    address_in: [String!]
    address_lt: String
    address_lte: String
    address_not: String
    address_not_contains: String
    address_not_contains_nocase: String
    address_not_ends_with: String
    address_not_ends_with_nocase: String
    address_not_in: [String!]
    address_not_starts_with: String
    address_not_starts_with_nocase: String
    address_starts_with: String
    address_starts_with_nocase: String
    and: [PoolToken_filter]
    assetManager: Bytes
    assetManager_contains: Bytes
    assetManager_gt: Bytes
    assetManager_gte: Bytes
    assetManager_in: [Bytes!]
    assetManager_lt: Bytes
    assetManager_lte: Bytes
    assetManager_not: Bytes
    assetManager_not_contains: Bytes
    assetManager_not_in: [Bytes!]
    balance: BigDecimal
    balance_gt: BigDecimal
    balance_gte: BigDecimal
    balance_in: [BigDecimal!]
    balance_lt: BigDecimal
    balance_lte: BigDecimal
    balance_not: BigDecimal
    balance_not_in: [BigDecimal!]
    cashBalance: BigDecimal
    cashBalance_gt: BigDecimal
    cashBalance_gte: BigDecimal
    cashBalance_in: [BigDecimal!]
    cashBalance_lt: BigDecimal
    cashBalance_lte: BigDecimal
    cashBalance_not: BigDecimal
    cashBalance_not_in: [BigDecimal!]
    circuitBreaker: String
    circuitBreaker_: CircuitBreaker_filter
    circuitBreaker_contains: String
    circuitBreaker_contains_nocase: String
    circuitBreaker_ends_with: String
    circuitBreaker_ends_with_nocase: String
    circuitBreaker_gt: String
    circuitBreaker_gte: String
    circuitBreaker_in: [String!]
    circuitBreaker_lt: String
    circuitBreaker_lte: String
    circuitBreaker_not: String
    circuitBreaker_not_contains: String
    circuitBreaker_not_contains_nocase: String
    circuitBreaker_not_ends_with: String
    circuitBreaker_not_ends_with_nocase: String
    circuitBreaker_not_in: [String!]
    circuitBreaker_not_starts_with: String
    circuitBreaker_not_starts_with_nocase: String
    circuitBreaker_starts_with: String
    circuitBreaker_starts_with_nocase: String
    decimals: Int
    decimals_gt: Int
    decimals_gte: Int
    decimals_in: [Int!]
    decimals_lt: Int
    decimals_lte: Int
    decimals_not: Int
    decimals_not_in: [Int!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    index: Int
    index_gt: Int
    index_gte: Int
    index_in: [Int!]
    index_lt: Int
    index_lte: Int
    index_not: Int
    index_not_in: [Int!]
    isExemptFromYieldProtocolFee: Boolean
    isExemptFromYieldProtocolFee_in: [Boolean!]
    isExemptFromYieldProtocolFee_not: Boolean
    isExemptFromYieldProtocolFee_not_in: [Boolean!]
    managedBalance: BigDecimal
    managedBalance_gt: BigDecimal
    managedBalance_gte: BigDecimal
    managedBalance_in: [BigDecimal!]
    managedBalance_lt: BigDecimal
    managedBalance_lte: BigDecimal
    managedBalance_not: BigDecimal
    managedBalance_not_in: [BigDecimal!]
    managements_: ManagementOperation_filter
    name: String
    name_contains: String
    name_contains_nocase: String
    name_ends_with: String
    name_ends_with_nocase: String
    name_gt: String
    name_gte: String
    name_in: [String!]
    name_lt: String
    name_lte: String
    name_not: String
    name_not_contains: String
    name_not_contains_nocase: String
    name_not_ends_with: String
    name_not_ends_with_nocase: String
    name_not_in: [String!]
    name_not_starts_with: String
    name_not_starts_with_nocase: String
    name_starts_with: String
    name_starts_with_nocase: String
    oldPriceRate: BigDecimal
    oldPriceRate_gt: BigDecimal
    oldPriceRate_gte: BigDecimal
    oldPriceRate_in: [BigDecimal!]
    oldPriceRate_lt: BigDecimal
    oldPriceRate_lte: BigDecimal
    oldPriceRate_not: BigDecimal
    oldPriceRate_not_in: [BigDecimal!]
    or: [PoolToken_filter]
    paidProtocolFees: BigDecimal
    paidProtocolFees_gt: BigDecimal
    paidProtocolFees_gte: BigDecimal
    paidProtocolFees_in: [BigDecimal!]
    paidProtocolFees_lt: BigDecimal
    paidProtocolFees_lte: BigDecimal
    paidProtocolFees_not: BigDecimal
    paidProtocolFees_not_in: [BigDecimal!]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    priceRate: BigDecimal
    priceRate_gt: BigDecimal
    priceRate_gte: BigDecimal
    priceRate_in: [BigDecimal!]
    priceRate_lt: BigDecimal
    priceRate_lte: BigDecimal
    priceRate_not: BigDecimal
    priceRate_not_in: [BigDecimal!]
    symbol: String
    symbol_contains: String
    symbol_contains_nocase: String
    symbol_ends_with: String
    symbol_ends_with_nocase: String
    symbol_gt: String
    symbol_gte: String
    symbol_in: [String!]
    symbol_lt: String
    symbol_lte: String
    symbol_not: String
    symbol_not_contains: String
    symbol_not_contains_nocase: String
    symbol_not_ends_with: String
    symbol_not_ends_with_nocase: String
    symbol_not_in: [String!]
    symbol_not_starts_with: String
    symbol_not_starts_with_nocase: String
    symbol_starts_with: String
    symbol_starts_with_nocase: String
    token: String
    token_: Token_filter
    token_contains: String
    token_contains_nocase: String
    token_ends_with: String
    token_ends_with_nocase: String
    token_gt: String
    token_gte: String
    token_in: [String!]
    token_lt: String
    token_lte: String
    token_not: String
    token_not_contains: String
    token_not_contains_nocase: String
    token_not_ends_with: String
    token_not_ends_with_nocase: String
    token_not_in: [String!]
    token_not_starts_with: String
    token_not_starts_with_nocase: String
    token_starts_with: String
    token_starts_with_nocase: String
    weight: BigDecimal
    weight_gt: BigDecimal
    weight_gte: BigDecimal
    weight_in: [BigDecimal!]
    weight_lt: BigDecimal
    weight_lte: BigDecimal
    weight_not: BigDecimal
    weight_not_in: [BigDecimal!]
}

enum PoolToken_orderBy {
    address
    assetManager
    balance
    cashBalance
    circuitBreaker
    circuitBreaker__bptPrice
    circuitBreaker__id
    circuitBreaker__lowerBoundPercentage
    circuitBreaker__upperBoundPercentage
    decimals
    id
    index
    isExemptFromYieldProtocolFee
    managedBalance
    managements
    name
    oldPriceRate
    paidProtocolFees
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    priceRate
    symbol
    token
    token__address
    token__decimals
    token__fxOracleDecimals
    token__id
    token__latestFXPrice
    token__latestUSDPrice
    token__latestUSDPriceTimestamp
    token__name
    token__symbol
    token__totalBalanceNotional
    token__totalBalanceUSD
    token__totalSwapCount
    token__totalVolumeNotional
    token__totalVolumeUSD
    weight
}

input Pool_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    address: Bytes
    address_contains: Bytes
    address_gt: Bytes
    address_gte: Bytes
    address_in: [Bytes!]
    address_lt: Bytes
    address_lte: Bytes
    address_not: Bytes
    address_not_contains: Bytes
    address_not_in: [Bytes!]
    alpha: BigDecimal
    alpha_gt: BigDecimal
    alpha_gte: BigDecimal
    alpha_in: [BigDecimal!]
    alpha_lt: BigDecimal
    alpha_lte: BigDecimal
    alpha_not: BigDecimal
    alpha_not_in: [BigDecimal!]
    amp: BigInt
    ampUpdates_: AmpUpdate_filter
    amp_gt: BigInt
    amp_gte: BigInt
    amp_in: [BigInt!]
    amp_lt: BigInt
    amp_lte: BigInt
    amp_not: BigInt
    amp_not_in: [BigInt!]
    and: [Pool_filter]
    baseToken: Bytes
    baseToken_contains: Bytes
    baseToken_gt: Bytes
    baseToken_gte: Bytes
    baseToken_in: [Bytes!]
    baseToken_lt: Bytes
    baseToken_lte: Bytes
    baseToken_not: Bytes
    baseToken_not_contains: Bytes
    baseToken_not_in: [Bytes!]
    beta: BigDecimal
    beta_gt: BigDecimal
    beta_gte: BigDecimal
    beta_in: [BigDecimal!]
    beta_lt: BigDecimal
    beta_lte: BigDecimal
    beta_not: BigDecimal
    beta_not_in: [BigDecimal!]
    c: BigDecimal
    c_gt: BigDecimal
    c_gte: BigDecimal
    c_in: [BigDecimal!]
    c_lt: BigDecimal
    c_lte: BigDecimal
    c_not: BigDecimal
    c_not_in: [BigDecimal!]
    circuitBreakers_: CircuitBreaker_filter
    createTime: Int
    createTime_gt: Int
    createTime_gte: Int
    createTime_in: [Int!]
    createTime_lt: Int
    createTime_lte: Int
    createTime_not: Int
    createTime_not_in: [Int!]
    dSq: BigDecimal
    dSq_gt: BigDecimal
    dSq_gte: BigDecimal
    dSq_in: [BigDecimal!]
    dSq_lt: BigDecimal
    dSq_lte: BigDecimal
    dSq_not: BigDecimal
    dSq_not_in: [BigDecimal!]
    delta: BigDecimal
    delta_gt: BigDecimal
    delta_gte: BigDecimal
    delta_in: [BigDecimal!]
    delta_lt: BigDecimal
    delta_lte: BigDecimal
    delta_not: BigDecimal
    delta_not_in: [BigDecimal!]
    epsilon: BigDecimal
    epsilon_gt: BigDecimal
    epsilon_gte: BigDecimal
    epsilon_in: [BigDecimal!]
    epsilon_lt: BigDecimal
    epsilon_lte: BigDecimal
    epsilon_not: BigDecimal
    epsilon_not_in: [BigDecimal!]
    expiryTime: BigInt
    expiryTime_gt: BigInt
    expiryTime_gte: BigInt
    expiryTime_in: [BigInt!]
    expiryTime_lt: BigInt
    expiryTime_lte: BigInt
    expiryTime_not: BigInt
    expiryTime_not_in: [BigInt!]
    factory: Bytes
    factory_contains: Bytes
    factory_gt: Bytes
    factory_gte: Bytes
    factory_in: [Bytes!]
    factory_lt: Bytes
    factory_lte: Bytes
    factory_not: Bytes
    factory_not_contains: Bytes
    factory_not_in: [Bytes!]
    historicalValues_: PoolHistoricalLiquidity_filter
    holdersCount: BigInt
    holdersCount_gt: BigInt
    holdersCount_gte: BigInt
    holdersCount_in: [BigInt!]
    holdersCount_lt: BigInt
    holdersCount_lte: BigInt
    holdersCount_not: BigInt
    holdersCount_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    isInRecoveryMode: Boolean
    isInRecoveryMode_in: [Boolean!]
    isInRecoveryMode_not: Boolean
    isInRecoveryMode_not_in: [Boolean!]
    isPaused: Boolean
    isPaused_in: [Boolean!]
    isPaused_not: Boolean
    isPaused_not_in: [Boolean!]
    joinExitEnabled: Boolean
    joinExitEnabled_in: [Boolean!]
    joinExitEnabled_not: Boolean
    joinExitEnabled_not_in: [Boolean!]
    joinsExits_: JoinExit_filter
    lambda: BigDecimal
    lambda_gt: BigDecimal
    lambda_gte: BigDecimal
    lambda_in: [BigDecimal!]
    lambda_lt: BigDecimal
    lambda_lte: BigDecimal
    lambda_not: BigDecimal
    lambda_not_in: [BigDecimal!]
    lastJoinExitAmp: BigInt
    lastJoinExitAmp_gt: BigInt
    lastJoinExitAmp_gte: BigInt
    lastJoinExitAmp_in: [BigInt!]
    lastJoinExitAmp_lt: BigInt
    lastJoinExitAmp_lte: BigInt
    lastJoinExitAmp_not: BigInt
    lastJoinExitAmp_not_in: [BigInt!]
    lastPostJoinExitInvariant: BigDecimal
    lastPostJoinExitInvariant_gt: BigDecimal
    lastPostJoinExitInvariant_gte: BigDecimal
    lastPostJoinExitInvariant_in: [BigDecimal!]
    lastPostJoinExitInvariant_lt: BigDecimal
    lastPostJoinExitInvariant_lte: BigDecimal
    lastPostJoinExitInvariant_not: BigDecimal
    lastPostJoinExitInvariant_not_in: [BigDecimal!]
    latestAmpUpdate: String
    latestAmpUpdate_: AmpUpdate_filter
    latestAmpUpdate_contains: String
    latestAmpUpdate_contains_nocase: String
    latestAmpUpdate_ends_with: String
    latestAmpUpdate_ends_with_nocase: String
    latestAmpUpdate_gt: String
    latestAmpUpdate_gte: String
    latestAmpUpdate_in: [String!]
    latestAmpUpdate_lt: String
    latestAmpUpdate_lte: String
    latestAmpUpdate_not: String
    latestAmpUpdate_not_contains: String
    latestAmpUpdate_not_contains_nocase: String
    latestAmpUpdate_not_ends_with: String
    latestAmpUpdate_not_ends_with_nocase: String
    latestAmpUpdate_not_in: [String!]
    latestAmpUpdate_not_starts_with: String
    latestAmpUpdate_not_starts_with_nocase: String
    latestAmpUpdate_starts_with: String
    latestAmpUpdate_starts_with_nocase: String
    lowerTarget: BigDecimal
    lowerTarget_gt: BigDecimal
    lowerTarget_gte: BigDecimal
    lowerTarget_in: [BigDecimal!]
    lowerTarget_lt: BigDecimal
    lowerTarget_lte: BigDecimal
    lowerTarget_not: BigDecimal
    lowerTarget_not_in: [BigDecimal!]
    mainIndex: Int
    mainIndex_gt: Int
    mainIndex_gte: Int
    mainIndex_in: [Int!]
    mainIndex_lt: Int
    mainIndex_lte: Int
    mainIndex_not: Int
    mainIndex_not_in: [Int!]
    managementAumFee: BigDecimal
    managementAumFee_gt: BigDecimal
    managementAumFee_gte: BigDecimal
    managementAumFee_in: [BigDecimal!]
    managementAumFee_lt: BigDecimal
    managementAumFee_lte: BigDecimal
    managementAumFee_not: BigDecimal
    managementAumFee_not_in: [BigDecimal!]
    managementFee: BigDecimal
    managementFee_gt: BigDecimal
    managementFee_gte: BigDecimal
    managementFee_in: [BigDecimal!]
    managementFee_lt: BigDecimal
    managementFee_lte: BigDecimal
    managementFee_not: BigDecimal
    managementFee_not_in: [BigDecimal!]
    mustAllowlistLPs: Boolean
    mustAllowlistLPs_in: [Boolean!]
    mustAllowlistLPs_not: Boolean
    mustAllowlistLPs_not_in: [Boolean!]
    name: String
    name_contains: String
    name_contains_nocase: String
    name_ends_with: String
    name_ends_with_nocase: String
    name_gt: String
    name_gte: String
    name_in: [String!]
    name_lt: String
    name_lte: String
    name_not: String
    name_not_contains: String
    name_not_contains_nocase: String
    name_not_ends_with: String
    name_not_ends_with_nocase: String
    name_not_in: [String!]
    name_not_starts_with: String
    name_not_starts_with_nocase: String
    name_starts_with: String
    name_starts_with_nocase: String
    or: [Pool_filter]
    oracleEnabled: Boolean
    oracleEnabled_in: [Boolean!]
    oracleEnabled_not: Boolean
    oracleEnabled_not_in: [Boolean!]
    owner: Bytes
    owner_contains: Bytes
    owner_gt: Bytes
    owner_gte: Bytes
    owner_in: [Bytes!]
    owner_lt: Bytes
    owner_lte: Bytes
    owner_not: Bytes
    owner_not_contains: Bytes
    owner_not_in: [Bytes!]
    poolType: String
    poolTypeVersion: Int
    poolTypeVersion_gt: Int
    poolTypeVersion_gte: Int
    poolTypeVersion_in: [Int!]
    poolTypeVersion_lt: Int
    poolTypeVersion_lte: Int
    poolTypeVersion_not: Int
    poolTypeVersion_not_in: [Int!]
    poolType_contains: String
    poolType_contains_nocase: String
    poolType_ends_with: String
    poolType_ends_with_nocase: String
    poolType_gt: String
    poolType_gte: String
    poolType_in: [String!]
    poolType_lt: String
    poolType_lte: String
    poolType_not: String
    poolType_not_contains: String
    poolType_not_contains_nocase: String
    poolType_not_ends_with: String
    poolType_not_ends_with_nocase: String
    poolType_not_in: [String!]
    poolType_not_starts_with: String
    poolType_not_starts_with_nocase: String
    poolType_starts_with: String
    poolType_starts_with_nocase: String
    priceRateProviders_: PriceRateProvider_filter
    principalToken: Bytes
    principalToken_contains: Bytes
    principalToken_gt: Bytes
    principalToken_gte: Bytes
    principalToken_in: [Bytes!]
    principalToken_lt: Bytes
    principalToken_lte: Bytes
    principalToken_not: Bytes
    principalToken_not_contains: Bytes
    principalToken_not_in: [Bytes!]
    protocolAumFeeCache: BigDecimal
    protocolAumFeeCache_gt: BigDecimal
    protocolAumFeeCache_gte: BigDecimal
    protocolAumFeeCache_in: [BigDecimal!]
    protocolAumFeeCache_lt: BigDecimal
    protocolAumFeeCache_lte: BigDecimal
    protocolAumFeeCache_not: BigDecimal
    protocolAumFeeCache_not_in: [BigDecimal!]
    protocolId: Int
    protocolIdData: String
    protocolIdData_: ProtocolIdData_filter
    protocolIdData_contains: String
    protocolIdData_contains_nocase: String
    protocolIdData_ends_with: String
    protocolIdData_ends_with_nocase: String
    protocolIdData_gt: String
    protocolIdData_gte: String
    protocolIdData_in: [String!]
    protocolIdData_lt: String
    protocolIdData_lte: String
    protocolIdData_not: String
    protocolIdData_not_contains: String
    protocolIdData_not_contains_nocase: String
    protocolIdData_not_ends_with: String
    protocolIdData_not_ends_with_nocase: String
    protocolIdData_not_in: [String!]
    protocolIdData_not_starts_with: String
    protocolIdData_not_starts_with_nocase: String
    protocolIdData_starts_with: String
    protocolIdData_starts_with_nocase: String
    protocolId_gt: Int
    protocolId_gte: Int
    protocolId_in: [Int!]
    protocolId_lt: Int
    protocolId_lte: Int
    protocolId_not: Int
    protocolId_not_in: [Int!]
    protocolSwapFeeCache: BigDecimal
    protocolSwapFeeCache_gt: BigDecimal
    protocolSwapFeeCache_gte: BigDecimal
    protocolSwapFeeCache_in: [BigDecimal!]
    protocolSwapFeeCache_lt: BigDecimal
    protocolSwapFeeCache_lte: BigDecimal
    protocolSwapFeeCache_not: BigDecimal
    protocolSwapFeeCache_not_in: [BigDecimal!]
    protocolYieldFeeCache: BigDecimal
    protocolYieldFeeCache_gt: BigDecimal
    protocolYieldFeeCache_gte: BigDecimal
    protocolYieldFeeCache_in: [BigDecimal!]
    protocolYieldFeeCache_lt: BigDecimal
    protocolYieldFeeCache_lte: BigDecimal
    protocolYieldFeeCache_not: BigDecimal
    protocolYieldFeeCache_not_in: [BigDecimal!]
    root3Alpha: BigDecimal
    root3Alpha_gt: BigDecimal
    root3Alpha_gte: BigDecimal
    root3Alpha_in: [BigDecimal!]
    root3Alpha_lt: BigDecimal
    root3Alpha_lte: BigDecimal
    root3Alpha_not: BigDecimal
    root3Alpha_not_in: [BigDecimal!]
    s: BigDecimal
    s_gt: BigDecimal
    s_gte: BigDecimal
    s_in: [BigDecimal!]
    s_lt: BigDecimal
    s_lte: BigDecimal
    s_not: BigDecimal
    s_not_in: [BigDecimal!]
    shares_: PoolShare_filter
    snapshots_: PoolSnapshot_filter
    sqrtAlpha: BigDecimal
    sqrtAlpha_gt: BigDecimal
    sqrtAlpha_gte: BigDecimal
    sqrtAlpha_in: [BigDecimal!]
    sqrtAlpha_lt: BigDecimal
    sqrtAlpha_lte: BigDecimal
    sqrtAlpha_not: BigDecimal
    sqrtAlpha_not_in: [BigDecimal!]
    sqrtBeta: BigDecimal
    sqrtBeta_gt: BigDecimal
    sqrtBeta_gte: BigDecimal
    sqrtBeta_in: [BigDecimal!]
    sqrtBeta_lt: BigDecimal
    sqrtBeta_lte: BigDecimal
    sqrtBeta_not: BigDecimal
    sqrtBeta_not_in: [BigDecimal!]
    strategyType: Int
    strategyType_gt: Int
    strategyType_gte: Int
    strategyType_in: [Int!]
    strategyType_lt: Int
    strategyType_lte: Int
    strategyType_not: Int
    strategyType_not_in: [Int!]
    swapEnabled: Boolean
    swapEnabledCurationSignal: Boolean
    swapEnabledCurationSignal_in: [Boolean!]
    swapEnabledCurationSignal_not: Boolean
    swapEnabledCurationSignal_not_in: [Boolean!]
    swapEnabledInternal: Boolean
    swapEnabledInternal_in: [Boolean!]
    swapEnabledInternal_not: Boolean
    swapEnabledInternal_not_in: [Boolean!]
    swapEnabled_in: [Boolean!]
    swapEnabled_not: Boolean
    swapEnabled_not_in: [Boolean!]
    swapFee: BigDecimal
    swapFee_gt: BigDecimal
    swapFee_gte: BigDecimal
    swapFee_in: [BigDecimal!]
    swapFee_lt: BigDecimal
    swapFee_lte: BigDecimal
    swapFee_not: BigDecimal
    swapFee_not_in: [BigDecimal!]
    swapsCount: BigInt
    swapsCount_gt: BigInt
    swapsCount_gte: BigInt
    swapsCount_in: [BigInt!]
    swapsCount_lt: BigInt
    swapsCount_lte: BigInt
    swapsCount_not: BigInt
    swapsCount_not_in: [BigInt!]
    swaps_: Swap_filter
    symbol: String
    symbol_contains: String
    symbol_contains_nocase: String
    symbol_ends_with: String
    symbol_ends_with_nocase: String
    symbol_gt: String
    symbol_gte: String
    symbol_in: [String!]
    symbol_lt: String
    symbol_lte: String
    symbol_not: String
    symbol_not_contains: String
    symbol_not_contains_nocase: String
    symbol_not_ends_with: String
    symbol_not_ends_with_nocase: String
    symbol_not_in: [String!]
    symbol_not_starts_with: String
    symbol_not_starts_with_nocase: String
    symbol_starts_with: String
    symbol_starts_with_nocase: String
    tauAlphaX: BigDecimal
    tauAlphaX_gt: BigDecimal
    tauAlphaX_gte: BigDecimal
    tauAlphaX_in: [BigDecimal!]
    tauAlphaX_lt: BigDecimal
    tauAlphaX_lte: BigDecimal
    tauAlphaX_not: BigDecimal
    tauAlphaX_not_in: [BigDecimal!]
    tauAlphaY: BigDecimal
    tauAlphaY_gt: BigDecimal
    tauAlphaY_gte: BigDecimal
    tauAlphaY_in: [BigDecimal!]
    tauAlphaY_lt: BigDecimal
    tauAlphaY_lte: BigDecimal
    tauAlphaY_not: BigDecimal
    tauAlphaY_not_in: [BigDecimal!]
    tauBetaX: BigDecimal
    tauBetaX_gt: BigDecimal
    tauBetaX_gte: BigDecimal
    tauBetaX_in: [BigDecimal!]
    tauBetaX_lt: BigDecimal
    tauBetaX_lte: BigDecimal
    tauBetaX_not: BigDecimal
    tauBetaX_not_in: [BigDecimal!]
    tauBetaY: BigDecimal
    tauBetaY_gt: BigDecimal
    tauBetaY_gte: BigDecimal
    tauBetaY_in: [BigDecimal!]
    tauBetaY_lt: BigDecimal
    tauBetaY_lte: BigDecimal
    tauBetaY_not: BigDecimal
    tauBetaY_not_in: [BigDecimal!]
    tokensList: [Bytes!]
    tokensList_contains: [Bytes!]
    tokensList_contains_nocase: [Bytes!]
    tokensList_not: [Bytes!]
    tokensList_not_contains: [Bytes!]
    tokensList_not_contains_nocase: [Bytes!]
    tokens_: PoolToken_filter
    totalAumFeeCollectedInBPT: BigDecimal
    totalAumFeeCollectedInBPT_gt: BigDecimal
    totalAumFeeCollectedInBPT_gte: BigDecimal
    totalAumFeeCollectedInBPT_in: [BigDecimal!]
    totalAumFeeCollectedInBPT_lt: BigDecimal
    totalAumFeeCollectedInBPT_lte: BigDecimal
    totalAumFeeCollectedInBPT_not: BigDecimal
    totalAumFeeCollectedInBPT_not_in: [BigDecimal!]
    totalLiquidity: BigDecimal
    totalLiquiditySansBPT: BigDecimal
    totalLiquiditySansBPT_gt: BigDecimal
    totalLiquiditySansBPT_gte: BigDecimal
    totalLiquiditySansBPT_in: [BigDecimal!]
    totalLiquiditySansBPT_lt: BigDecimal
    totalLiquiditySansBPT_lte: BigDecimal
    totalLiquiditySansBPT_not: BigDecimal
    totalLiquiditySansBPT_not_in: [BigDecimal!]
    totalLiquidity_gt: BigDecimal
    totalLiquidity_gte: BigDecimal
    totalLiquidity_in: [BigDecimal!]
    totalLiquidity_lt: BigDecimal
    totalLiquidity_lte: BigDecimal
    totalLiquidity_not: BigDecimal
    totalLiquidity_not_in: [BigDecimal!]
    totalProtocolFee: BigDecimal
    totalProtocolFeePaidInBPT: BigDecimal
    totalProtocolFeePaidInBPT_gt: BigDecimal
    totalProtocolFeePaidInBPT_gte: BigDecimal
    totalProtocolFeePaidInBPT_in: [BigDecimal!]
    totalProtocolFeePaidInBPT_lt: BigDecimal
    totalProtocolFeePaidInBPT_lte: BigDecimal
    totalProtocolFeePaidInBPT_not: BigDecimal
    totalProtocolFeePaidInBPT_not_in: [BigDecimal!]
    totalProtocolFee_gt: BigDecimal
    totalProtocolFee_gte: BigDecimal
    totalProtocolFee_in: [BigDecimal!]
    totalProtocolFee_lt: BigDecimal
    totalProtocolFee_lte: BigDecimal
    totalProtocolFee_not: BigDecimal
    totalProtocolFee_not_in: [BigDecimal!]
    totalShares: BigDecimal
    totalShares_gt: BigDecimal
    totalShares_gte: BigDecimal
    totalShares_in: [BigDecimal!]
    totalShares_lt: BigDecimal
    totalShares_lte: BigDecimal
    totalShares_not: BigDecimal
    totalShares_not_in: [BigDecimal!]
    totalSwapFee: BigDecimal
    totalSwapFee_gt: BigDecimal
    totalSwapFee_gte: BigDecimal
    totalSwapFee_in: [BigDecimal!]
    totalSwapFee_lt: BigDecimal
    totalSwapFee_lte: BigDecimal
    totalSwapFee_not: BigDecimal
    totalSwapFee_not_in: [BigDecimal!]
    totalSwapVolume: BigDecimal
    totalSwapVolume_gt: BigDecimal
    totalSwapVolume_gte: BigDecimal
    totalSwapVolume_in: [BigDecimal!]
    totalSwapVolume_lt: BigDecimal
    totalSwapVolume_lte: BigDecimal
    totalSwapVolume_not: BigDecimal
    totalSwapVolume_not_in: [BigDecimal!]
    totalWeight: BigDecimal
    totalWeight_gt: BigDecimal
    totalWeight_gte: BigDecimal
    totalWeight_in: [BigDecimal!]
    totalWeight_lt: BigDecimal
    totalWeight_lte: BigDecimal
    totalWeight_not: BigDecimal
    totalWeight_not_in: [BigDecimal!]
    tx: Bytes
    tx_contains: Bytes
    tx_gt: Bytes
    tx_gte: Bytes
    tx_in: [Bytes!]
    tx_lt: Bytes
    tx_lte: Bytes
    tx_not: Bytes
    tx_not_contains: Bytes
    tx_not_in: [Bytes!]
    u: BigDecimal
    u_gt: BigDecimal
    u_gte: BigDecimal
    u_in: [BigDecimal!]
    u_lt: BigDecimal
    u_lte: BigDecimal
    u_not: BigDecimal
    u_not_in: [BigDecimal!]
    unitSeconds: BigInt
    unitSeconds_gt: BigInt
    unitSeconds_gte: BigInt
    unitSeconds_in: [BigInt!]
    unitSeconds_lt: BigInt
    unitSeconds_lte: BigInt
    unitSeconds_not: BigInt
    unitSeconds_not_in: [BigInt!]
    upperTarget: BigDecimal
    upperTarget_gt: BigDecimal
    upperTarget_gte: BigDecimal
    upperTarget_in: [BigDecimal!]
    upperTarget_lt: BigDecimal
    upperTarget_lte: BigDecimal
    upperTarget_not: BigDecimal
    upperTarget_not_in: [BigDecimal!]
    v: BigDecimal
    v_gt: BigDecimal
    v_gte: BigDecimal
    v_in: [BigDecimal!]
    v_lt: BigDecimal
    v_lte: BigDecimal
    v_not: BigDecimal
    v_not_in: [BigDecimal!]
    vaultID: String
    vaultID_: Balancer_filter
    vaultID_contains: String
    vaultID_contains_nocase: String
    vaultID_ends_with: String
    vaultID_ends_with_nocase: String
    vaultID_gt: String
    vaultID_gte: String
    vaultID_in: [String!]
    vaultID_lt: String
    vaultID_lte: String
    vaultID_not: String
    vaultID_not_contains: String
    vaultID_not_contains_nocase: String
    vaultID_not_ends_with: String
    vaultID_not_ends_with_nocase: String
    vaultID_not_in: [String!]
    vaultID_not_starts_with: String
    vaultID_not_starts_with_nocase: String
    vaultID_starts_with: String
    vaultID_starts_with_nocase: String
    w: BigDecimal
    w_gt: BigDecimal
    w_gte: BigDecimal
    w_in: [BigDecimal!]
    w_lt: BigDecimal
    w_lte: BigDecimal
    w_not: BigDecimal
    w_not_in: [BigDecimal!]
    weightUpdates_: GradualWeightUpdate_filter
    wrappedIndex: Int
    wrappedIndex_gt: Int
    wrappedIndex_gte: Int
    wrappedIndex_in: [Int!]
    wrappedIndex_lt: Int
    wrappedIndex_lte: Int
    wrappedIndex_not: Int
    wrappedIndex_not_in: [Int!]
    z: BigDecimal
    z_gt: BigDecimal
    z_gte: BigDecimal
    z_in: [BigDecimal!]
    z_lt: BigDecimal
    z_lte: BigDecimal
    z_not: BigDecimal
    z_not_in: [BigDecimal!]
}

enum Pool_orderBy {
    address
    alpha
    amp
    ampUpdates
    baseToken
    beta
    c
    circuitBreakers
    createTime
    dSq
    delta
    epsilon
    expiryTime
    factory
    historicalValues
    holdersCount
    id
    isInRecoveryMode
    isPaused
    joinExitEnabled
    joinsExits
    lambda
    lastJoinExitAmp
    lastPostJoinExitInvariant
    latestAmpUpdate
    latestAmpUpdate__endAmp
    latestAmpUpdate__endTimestamp
    latestAmpUpdate__id
    latestAmpUpdate__scheduledTimestamp
    latestAmpUpdate__startAmp
    latestAmpUpdate__startTimestamp
    lowerTarget
    mainIndex
    managementAumFee
    managementFee
    mustAllowlistLPs
    name
    oracleEnabled
    owner
    poolType
    poolTypeVersion
    priceRateProviders
    principalToken
    protocolAumFeeCache
    protocolId
    protocolIdData
    protocolIdData__id
    protocolIdData__name
    protocolSwapFeeCache
    protocolYieldFeeCache
    root3Alpha
    s
    shares
    snapshots
    sqrtAlpha
    sqrtBeta
    strategyType
    swapEnabled
    swapEnabledCurationSignal
    swapEnabledInternal
    swapFee
    swaps
    swapsCount
    symbol
    tauAlphaX
    tauAlphaY
    tauBetaX
    tauBetaY
    tokens
    tokensList
    totalAumFeeCollectedInBPT
    totalLiquidity
    totalLiquiditySansBPT
    totalProtocolFee
    totalProtocolFeePaidInBPT
    totalShares
    totalSwapFee
    totalSwapVolume
    totalWeight
    tx
    u
    unitSeconds
    upperTarget
    v
    vaultID
    vaultID__id
    vaultID__poolCount
    vaultID__protocolFeesCollector
    vaultID__totalLiquidity
    vaultID__totalProtocolFee
    vaultID__totalSwapCount
    vaultID__totalSwapFee
    vaultID__totalSwapVolume
    w
    weightUpdates
    wrappedIndex
    z
}

type PriceRateProvider {
    address: Bytes!
    cacheDuration: Int
    cacheExpiry: Int
    id: ID!
    lastCached: Int
    poolId: Pool!
    rate: BigDecimal
    token: PoolToken!
}

input PriceRateProvider_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    address: Bytes
    address_contains: Bytes
    address_gt: Bytes
    address_gte: Bytes
    address_in: [Bytes!]
    address_lt: Bytes
    address_lte: Bytes
    address_not: Bytes
    address_not_contains: Bytes
    address_not_in: [Bytes!]
    and: [PriceRateProvider_filter]
    cacheDuration: Int
    cacheDuration_gt: Int
    cacheDuration_gte: Int
    cacheDuration_in: [Int!]
    cacheDuration_lt: Int
    cacheDuration_lte: Int
    cacheDuration_not: Int
    cacheDuration_not_in: [Int!]
    cacheExpiry: Int
    cacheExpiry_gt: Int
    cacheExpiry_gte: Int
    cacheExpiry_in: [Int!]
    cacheExpiry_lt: Int
    cacheExpiry_lte: Int
    cacheExpiry_not: Int
    cacheExpiry_not_in: [Int!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    lastCached: Int
    lastCached_gt: Int
    lastCached_gte: Int
    lastCached_in: [Int!]
    lastCached_lt: Int
    lastCached_lte: Int
    lastCached_not: Int
    lastCached_not_in: [Int!]
    or: [PriceRateProvider_filter]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    rate: BigDecimal
    rate_gt: BigDecimal
    rate_gte: BigDecimal
    rate_in: [BigDecimal!]
    rate_lt: BigDecimal
    rate_lte: BigDecimal
    rate_not: BigDecimal
    rate_not_in: [BigDecimal!]
    token: String
    token_: PoolToken_filter
    token_contains: String
    token_contains_nocase: String
    token_ends_with: String
    token_ends_with_nocase: String
    token_gt: String
    token_gte: String
    token_in: [String!]
    token_lt: String
    token_lte: String
    token_not: String
    token_not_contains: String
    token_not_contains_nocase: String
    token_not_ends_with: String
    token_not_ends_with_nocase: String
    token_not_in: [String!]
    token_not_starts_with: String
    token_not_starts_with_nocase: String
    token_starts_with: String
    token_starts_with_nocase: String
}

enum PriceRateProvider_orderBy {
    address
    cacheDuration
    cacheExpiry
    id
    lastCached
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    rate
    token
    token__address
    token__assetManager
    token__balance
    token__cashBalance
    token__decimals
    token__id
    token__index
    token__isExemptFromYieldProtocolFee
    token__managedBalance
    token__name
    token__oldPriceRate
    token__paidProtocolFees
    token__priceRate
    token__symbol
    token__weight
}

type ProtocolIdData {
    id: ID!
    name: String!
}

input ProtocolIdData_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [ProtocolIdData_filter]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    name: String
    name_contains: String
    name_contains_nocase: String
    name_ends_with: String
    name_ends_with_nocase: String
    name_gt: String
    name_gte: String
    name_in: [String!]
    name_lt: String
    name_lte: String
    name_not: String
    name_not_contains: String
    name_not_contains_nocase: String
    name_not_ends_with: String
    name_not_ends_with_nocase: String
    name_not_in: [String!]
    name_not_starts_with: String
    name_not_starts_with_nocase: String
    name_starts_with: String
    name_starts_with_nocase: String
    or: [ProtocolIdData_filter]
}

enum ProtocolIdData_orderBy {
    id
    name
}

type Query {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    ampUpdate(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): AmpUpdate
    ampUpdates(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: AmpUpdate_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: AmpUpdate_filter
    ): [AmpUpdate!]!
    balancer(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Balancer
    balancerSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): BalancerSnapshot
    balancerSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: BalancerSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: BalancerSnapshot_filter
    ): [BalancerSnapshot!]!
    balancers(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Balancer_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Balancer_filter
    ): [Balancer!]!
    circuitBreaker(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): CircuitBreaker
    circuitBreakers(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: CircuitBreaker_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: CircuitBreaker_filter
    ): [CircuitBreaker!]!
    fxoracle(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): FXOracle
    fxoracles(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: FXOracle_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: FXOracle_filter
    ): [FXOracle!]!
    gradualWeightUpdate(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): GradualWeightUpdate
    gradualWeightUpdates(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: GradualWeightUpdate_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: GradualWeightUpdate_filter
    ): [GradualWeightUpdate!]!
    joinExit(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): JoinExit
    joinExits(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: JoinExit_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: JoinExit_filter
    ): [JoinExit!]!
    latestPrice(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): LatestPrice
    latestPrices(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: LatestPrice_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: LatestPrice_filter
    ): [LatestPrice!]!
    managementOperation(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): ManagementOperation
    managementOperations(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: ManagementOperation_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: ManagementOperation_filter
    ): [ManagementOperation!]!
    pool(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Pool
    poolContract(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolContract
    poolContracts(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolContract_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolContract_filter
    ): [PoolContract!]!
    poolHistoricalLiquidities(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolHistoricalLiquidity_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolHistoricalLiquidity_filter
    ): [PoolHistoricalLiquidity!]!
    poolHistoricalLiquidity(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolHistoricalLiquidity
    poolShare(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolShare
    poolShares(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolShare_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolShare_filter
    ): [PoolShare!]!
    poolSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolSnapshot
    poolSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolSnapshot_filter
    ): [PoolSnapshot!]!
    poolToken(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolToken
    poolTokens(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolToken_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolToken_filter
    ): [PoolToken!]!
    pools(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Pool_filter
    ): [Pool!]!
    priceRateProvider(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PriceRateProvider
    priceRateProviders(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PriceRateProvider_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PriceRateProvider_filter
    ): [PriceRateProvider!]!
    protocolIdData(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): ProtocolIdData
    protocolIdDatas(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: ProtocolIdData_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: ProtocolIdData_filter
    ): [ProtocolIdData!]!
    swap(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Swap
    swapFeeUpdate(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): SwapFeeUpdate
    swapFeeUpdates(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: SwapFeeUpdate_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: SwapFeeUpdate_filter
    ): [SwapFeeUpdate!]!
    swaps(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Swap_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Swap_filter
    ): [Swap!]!
    token(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Token
    tokenPrice(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): TokenPrice
    tokenPrices(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: TokenPrice_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: TokenPrice_filter
    ): [TokenPrice!]!
    tokenSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): TokenSnapshot
    tokenSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: TokenSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: TokenSnapshot_filter
    ): [TokenSnapshot!]!
    tokens(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Token_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Token_filter
    ): [Token!]!
    tradePair(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): TradePair
    tradePairSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): TradePairSnapshot
    tradePairSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: TradePairSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: TradePairSnapshot_filter
    ): [TradePairSnapshot!]!
    tradePairs(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: TradePair_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: TradePair_filter
    ): [TradePair!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    userInternalBalance(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): UserInternalBalance
    userInternalBalances(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: UserInternalBalance_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: UserInternalBalance_filter
    ): [UserInternalBalance!]!
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
}

type Subscription {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    ampUpdate(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): AmpUpdate
    ampUpdates(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: AmpUpdate_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: AmpUpdate_filter
    ): [AmpUpdate!]!
    balancer(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Balancer
    balancerSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): BalancerSnapshot
    balancerSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: BalancerSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: BalancerSnapshot_filter
    ): [BalancerSnapshot!]!
    balancers(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Balancer_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Balancer_filter
    ): [Balancer!]!
    circuitBreaker(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): CircuitBreaker
    circuitBreakers(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: CircuitBreaker_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: CircuitBreaker_filter
    ): [CircuitBreaker!]!
    fxoracle(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): FXOracle
    fxoracles(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: FXOracle_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: FXOracle_filter
    ): [FXOracle!]!
    gradualWeightUpdate(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): GradualWeightUpdate
    gradualWeightUpdates(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: GradualWeightUpdate_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: GradualWeightUpdate_filter
    ): [GradualWeightUpdate!]!
    joinExit(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): JoinExit
    joinExits(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: JoinExit_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: JoinExit_filter
    ): [JoinExit!]!
    latestPrice(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): LatestPrice
    latestPrices(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: LatestPrice_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: LatestPrice_filter
    ): [LatestPrice!]!
    managementOperation(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): ManagementOperation
    managementOperations(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: ManagementOperation_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: ManagementOperation_filter
    ): [ManagementOperation!]!
    pool(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Pool
    poolContract(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolContract
    poolContracts(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolContract_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolContract_filter
    ): [PoolContract!]!
    poolHistoricalLiquidities(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolHistoricalLiquidity_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolHistoricalLiquidity_filter
    ): [PoolHistoricalLiquidity!]!
    poolHistoricalLiquidity(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolHistoricalLiquidity
    poolShare(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolShare
    poolShares(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolShare_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolShare_filter
    ): [PoolShare!]!
    poolSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolSnapshot
    poolSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolSnapshot_filter
    ): [PoolSnapshot!]!
    poolToken(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PoolToken
    poolTokens(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PoolToken_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PoolToken_filter
    ): [PoolToken!]!
    pools(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Pool_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Pool_filter
    ): [Pool!]!
    priceRateProvider(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): PriceRateProvider
    priceRateProviders(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: PriceRateProvider_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: PriceRateProvider_filter
    ): [PriceRateProvider!]!
    protocolIdData(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): ProtocolIdData
    protocolIdDatas(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: ProtocolIdData_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: ProtocolIdData_filter
    ): [ProtocolIdData!]!
    swap(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Swap
    swapFeeUpdate(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): SwapFeeUpdate
    swapFeeUpdates(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: SwapFeeUpdate_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: SwapFeeUpdate_filter
    ): [SwapFeeUpdate!]!
    swaps(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Swap_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Swap_filter
    ): [Swap!]!
    token(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Token
    tokenPrice(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): TokenPrice
    tokenPrices(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: TokenPrice_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: TokenPrice_filter
    ): [TokenPrice!]!
    tokenSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): TokenSnapshot
    tokenSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: TokenSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: TokenSnapshot_filter
    ): [TokenSnapshot!]!
    tokens(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Token_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Token_filter
    ): [Token!]!
    tradePair(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): TradePair
    tradePairSnapshot(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): TradePairSnapshot
    tradePairSnapshots(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: TradePairSnapshot_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: TradePairSnapshot_filter
    ): [TradePairSnapshot!]!
    tradePairs(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: TradePair_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: TradePair_filter
    ): [TradePair!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    userInternalBalance(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): UserInternalBalance
    userInternalBalances(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: UserInternalBalance_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: UserInternalBalance_filter
    ): [UserInternalBalance!]!
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
}

type Swap {
    block: BigInt
    caller: Bytes!
    id: ID!
    poolId: Pool!
    timestamp: Int!
    tokenAmountIn: BigDecimal!
    tokenAmountOut: BigDecimal!
    tokenIn: Bytes!
    tokenInSym: String!
    tokenOut: Bytes!
    tokenOutSym: String!
    tx: Bytes!
    userAddress: User!
    valueUSD: BigDecimal!
}

type SwapFeeUpdate {
    endSwapFeePercentage: BigDecimal!
    endTimestamp: BigInt!
    id: ID!
    pool: Pool!
    scheduledTimestamp: Int!
    startSwapFeePercentage: BigDecimal!
    startTimestamp: BigInt!
}

input SwapFeeUpdate_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [SwapFeeUpdate_filter]
    endSwapFeePercentage: BigDecimal
    endSwapFeePercentage_gt: BigDecimal
    endSwapFeePercentage_gte: BigDecimal
    endSwapFeePercentage_in: [BigDecimal!]
    endSwapFeePercentage_lt: BigDecimal
    endSwapFeePercentage_lte: BigDecimal
    endSwapFeePercentage_not: BigDecimal
    endSwapFeePercentage_not_in: [BigDecimal!]
    endTimestamp: BigInt
    endTimestamp_gt: BigInt
    endTimestamp_gte: BigInt
    endTimestamp_in: [BigInt!]
    endTimestamp_lt: BigInt
    endTimestamp_lte: BigInt
    endTimestamp_not: BigInt
    endTimestamp_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [SwapFeeUpdate_filter]
    pool: String
    pool_: Pool_filter
    pool_contains: String
    pool_contains_nocase: String
    pool_ends_with: String
    pool_ends_with_nocase: String
    pool_gt: String
    pool_gte: String
    pool_in: [String!]
    pool_lt: String
    pool_lte: String
    pool_not: String
    pool_not_contains: String
    pool_not_contains_nocase: String
    pool_not_ends_with: String
    pool_not_ends_with_nocase: String
    pool_not_in: [String!]
    pool_not_starts_with: String
    pool_not_starts_with_nocase: String
    pool_starts_with: String
    pool_starts_with_nocase: String
    scheduledTimestamp: Int
    scheduledTimestamp_gt: Int
    scheduledTimestamp_gte: Int
    scheduledTimestamp_in: [Int!]
    scheduledTimestamp_lt: Int
    scheduledTimestamp_lte: Int
    scheduledTimestamp_not: Int
    scheduledTimestamp_not_in: [Int!]
    startSwapFeePercentage: BigDecimal
    startSwapFeePercentage_gt: BigDecimal
    startSwapFeePercentage_gte: BigDecimal
    startSwapFeePercentage_in: [BigDecimal!]
    startSwapFeePercentage_lt: BigDecimal
    startSwapFeePercentage_lte: BigDecimal
    startSwapFeePercentage_not: BigDecimal
    startSwapFeePercentage_not_in: [BigDecimal!]
    startTimestamp: BigInt
    startTimestamp_gt: BigInt
    startTimestamp_gte: BigInt
    startTimestamp_in: [BigInt!]
    startTimestamp_lt: BigInt
    startTimestamp_lte: BigInt
    startTimestamp_not: BigInt
    startTimestamp_not_in: [BigInt!]
}

enum SwapFeeUpdate_orderBy {
    endSwapFeePercentage
    endTimestamp
    id
    pool
    pool__address
    pool__alpha
    pool__amp
    pool__baseToken
    pool__beta
    pool__c
    pool__createTime
    pool__dSq
    pool__delta
    pool__epsilon
    pool__expiryTime
    pool__factory
    pool__holdersCount
    pool__id
    pool__isInRecoveryMode
    pool__isPaused
    pool__joinExitEnabled
    pool__lambda
    pool__lastJoinExitAmp
    pool__lastPostJoinExitInvariant
    pool__lowerTarget
    pool__mainIndex
    pool__managementAumFee
    pool__managementFee
    pool__mustAllowlistLPs
    pool__name
    pool__oracleEnabled
    pool__owner
    pool__poolType
    pool__poolTypeVersion
    pool__principalToken
    pool__protocolAumFeeCache
    pool__protocolId
    pool__protocolSwapFeeCache
    pool__protocolYieldFeeCache
    pool__root3Alpha
    pool__s
    pool__sqrtAlpha
    pool__sqrtBeta
    pool__strategyType
    pool__swapEnabled
    pool__swapEnabledCurationSignal
    pool__swapEnabledInternal
    pool__swapFee
    pool__swapsCount
    pool__symbol
    pool__tauAlphaX
    pool__tauAlphaY
    pool__tauBetaX
    pool__tauBetaY
    pool__totalAumFeeCollectedInBPT
    pool__totalLiquidity
    pool__totalLiquiditySansBPT
    pool__totalProtocolFee
    pool__totalProtocolFeePaidInBPT
    pool__totalShares
    pool__totalSwapFee
    pool__totalSwapVolume
    pool__totalWeight
    pool__tx
    pool__u
    pool__unitSeconds
    pool__upperTarget
    pool__v
    pool__w
    pool__wrappedIndex
    pool__z
    scheduledTimestamp
    startSwapFeePercentage
    startTimestamp
}

input Swap_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [Swap_filter]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    caller: Bytes
    caller_contains: Bytes
    caller_gt: Bytes
    caller_gte: Bytes
    caller_in: [Bytes!]
    caller_lt: Bytes
    caller_lte: Bytes
    caller_not: Bytes
    caller_not_contains: Bytes
    caller_not_in: [Bytes!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [Swap_filter]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
    tokenAmountIn: BigDecimal
    tokenAmountIn_gt: BigDecimal
    tokenAmountIn_gte: BigDecimal
    tokenAmountIn_in: [BigDecimal!]
    tokenAmountIn_lt: BigDecimal
    tokenAmountIn_lte: BigDecimal
    tokenAmountIn_not: BigDecimal
    tokenAmountIn_not_in: [BigDecimal!]
    tokenAmountOut: BigDecimal
    tokenAmountOut_gt: BigDecimal
    tokenAmountOut_gte: BigDecimal
    tokenAmountOut_in: [BigDecimal!]
    tokenAmountOut_lt: BigDecimal
    tokenAmountOut_lte: BigDecimal
    tokenAmountOut_not: BigDecimal
    tokenAmountOut_not_in: [BigDecimal!]
    tokenIn: Bytes
    tokenInSym: String
    tokenInSym_contains: String
    tokenInSym_contains_nocase: String
    tokenInSym_ends_with: String
    tokenInSym_ends_with_nocase: String
    tokenInSym_gt: String
    tokenInSym_gte: String
    tokenInSym_in: [String!]
    tokenInSym_lt: String
    tokenInSym_lte: String
    tokenInSym_not: String
    tokenInSym_not_contains: String
    tokenInSym_not_contains_nocase: String
    tokenInSym_not_ends_with: String
    tokenInSym_not_ends_with_nocase: String
    tokenInSym_not_in: [String!]
    tokenInSym_not_starts_with: String
    tokenInSym_not_starts_with_nocase: String
    tokenInSym_starts_with: String
    tokenInSym_starts_with_nocase: String
    tokenIn_contains: Bytes
    tokenIn_gt: Bytes
    tokenIn_gte: Bytes
    tokenIn_in: [Bytes!]
    tokenIn_lt: Bytes
    tokenIn_lte: Bytes
    tokenIn_not: Bytes
    tokenIn_not_contains: Bytes
    tokenIn_not_in: [Bytes!]
    tokenOut: Bytes
    tokenOutSym: String
    tokenOutSym_contains: String
    tokenOutSym_contains_nocase: String
    tokenOutSym_ends_with: String
    tokenOutSym_ends_with_nocase: String
    tokenOutSym_gt: String
    tokenOutSym_gte: String
    tokenOutSym_in: [String!]
    tokenOutSym_lt: String
    tokenOutSym_lte: String
    tokenOutSym_not: String
    tokenOutSym_not_contains: String
    tokenOutSym_not_contains_nocase: String
    tokenOutSym_not_ends_with: String
    tokenOutSym_not_ends_with_nocase: String
    tokenOutSym_not_in: [String!]
    tokenOutSym_not_starts_with: String
    tokenOutSym_not_starts_with_nocase: String
    tokenOutSym_starts_with: String
    tokenOutSym_starts_with_nocase: String
    tokenOut_contains: Bytes
    tokenOut_gt: Bytes
    tokenOut_gte: Bytes
    tokenOut_in: [Bytes!]
    tokenOut_lt: Bytes
    tokenOut_lte: Bytes
    tokenOut_not: Bytes
    tokenOut_not_contains: Bytes
    tokenOut_not_in: [Bytes!]
    tx: Bytes
    tx_contains: Bytes
    tx_gt: Bytes
    tx_gte: Bytes
    tx_in: [Bytes!]
    tx_lt: Bytes
    tx_lte: Bytes
    tx_not: Bytes
    tx_not_contains: Bytes
    tx_not_in: [Bytes!]
    userAddress: String
    userAddress_: User_filter
    userAddress_contains: String
    userAddress_contains_nocase: String
    userAddress_ends_with: String
    userAddress_ends_with_nocase: String
    userAddress_gt: String
    userAddress_gte: String
    userAddress_in: [String!]
    userAddress_lt: String
    userAddress_lte: String
    userAddress_not: String
    userAddress_not_contains: String
    userAddress_not_contains_nocase: String
    userAddress_not_ends_with: String
    userAddress_not_ends_with_nocase: String
    userAddress_not_in: [String!]
    userAddress_not_starts_with: String
    userAddress_not_starts_with_nocase: String
    userAddress_starts_with: String
    userAddress_starts_with_nocase: String
    valueUSD: BigDecimal
    valueUSD_gt: BigDecimal
    valueUSD_gte: BigDecimal
    valueUSD_in: [BigDecimal!]
    valueUSD_lt: BigDecimal
    valueUSD_lte: BigDecimal
    valueUSD_not: BigDecimal
    valueUSD_not_in: [BigDecimal!]
}

enum Swap_orderBy {
    block
    caller
    id
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    timestamp
    tokenAmountIn
    tokenAmountOut
    tokenIn
    tokenInSym
    tokenOut
    tokenOutSym
    tx
    userAddress
    userAddress__id
    valueUSD
}

"""
A string representation of microseconds UNIX timestamp (16 digits)
"""
scalar Timestamp

type Token {
    address: String!
    decimals: Int!
    fxOracleDecimals: Int
    id: ID!
    latestFXPrice: BigDecimal
    latestPrice: LatestPrice
    latestUSDPrice: BigDecimal
    latestUSDPriceTimestamp: BigInt
    name: String
    pool: Pool
    symbol: String
    totalBalanceNotional: BigDecimal!
    totalBalanceUSD: BigDecimal!
    totalSwapCount: BigInt!
    totalVolumeNotional: BigDecimal!
    totalVolumeUSD: BigDecimal!
}

type TokenPrice {
    amount: BigDecimal!
    asset: Bytes!
    block: BigInt!
    id: ID!
    poolId: Pool!
    price: BigDecimal!
    pricingAsset: Bytes!
    timestamp: Int!
}

input TokenPrice_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    amount: BigDecimal
    amount_gt: BigDecimal
    amount_gte: BigDecimal
    amount_in: [BigDecimal!]
    amount_lt: BigDecimal
    amount_lte: BigDecimal
    amount_not: BigDecimal
    amount_not_in: [BigDecimal!]
    and: [TokenPrice_filter]
    asset: Bytes
    asset_contains: Bytes
    asset_gt: Bytes
    asset_gte: Bytes
    asset_in: [Bytes!]
    asset_lt: Bytes
    asset_lte: Bytes
    asset_not: Bytes
    asset_not_contains: Bytes
    asset_not_in: [Bytes!]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [TokenPrice_filter]
    poolId: String
    poolId_: Pool_filter
    poolId_contains: String
    poolId_contains_nocase: String
    poolId_ends_with: String
    poolId_ends_with_nocase: String
    poolId_gt: String
    poolId_gte: String
    poolId_in: [String!]
    poolId_lt: String
    poolId_lte: String
    poolId_not: String
    poolId_not_contains: String
    poolId_not_contains_nocase: String
    poolId_not_ends_with: String
    poolId_not_ends_with_nocase: String
    poolId_not_in: [String!]
    poolId_not_starts_with: String
    poolId_not_starts_with_nocase: String
    poolId_starts_with: String
    poolId_starts_with_nocase: String
    price: BigDecimal
    price_gt: BigDecimal
    price_gte: BigDecimal
    price_in: [BigDecimal!]
    price_lt: BigDecimal
    price_lte: BigDecimal
    price_not: BigDecimal
    price_not_in: [BigDecimal!]
    pricingAsset: Bytes
    pricingAsset_contains: Bytes
    pricingAsset_gt: Bytes
    pricingAsset_gte: Bytes
    pricingAsset_in: [Bytes!]
    pricingAsset_lt: Bytes
    pricingAsset_lte: Bytes
    pricingAsset_not: Bytes
    pricingAsset_not_contains: Bytes
    pricingAsset_not_in: [Bytes!]
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
}

enum TokenPrice_orderBy {
    amount
    asset
    block
    id
    poolId
    poolId__address
    poolId__alpha
    poolId__amp
    poolId__baseToken
    poolId__beta
    poolId__c
    poolId__createTime
    poolId__dSq
    poolId__delta
    poolId__epsilon
    poolId__expiryTime
    poolId__factory
    poolId__holdersCount
    poolId__id
    poolId__isInRecoveryMode
    poolId__isPaused
    poolId__joinExitEnabled
    poolId__lambda
    poolId__lastJoinExitAmp
    poolId__lastPostJoinExitInvariant
    poolId__lowerTarget
    poolId__mainIndex
    poolId__managementAumFee
    poolId__managementFee
    poolId__mustAllowlistLPs
    poolId__name
    poolId__oracleEnabled
    poolId__owner
    poolId__poolType
    poolId__poolTypeVersion
    poolId__principalToken
    poolId__protocolAumFeeCache
    poolId__protocolId
    poolId__protocolSwapFeeCache
    poolId__protocolYieldFeeCache
    poolId__root3Alpha
    poolId__s
    poolId__sqrtAlpha
    poolId__sqrtBeta
    poolId__strategyType
    poolId__swapEnabled
    poolId__swapEnabledCurationSignal
    poolId__swapEnabledInternal
    poolId__swapFee
    poolId__swapsCount
    poolId__symbol
    poolId__tauAlphaX
    poolId__tauAlphaY
    poolId__tauBetaX
    poolId__tauBetaY
    poolId__totalAumFeeCollectedInBPT
    poolId__totalLiquidity
    poolId__totalLiquiditySansBPT
    poolId__totalProtocolFee
    poolId__totalProtocolFeePaidInBPT
    poolId__totalShares
    poolId__totalSwapFee
    poolId__totalSwapVolume
    poolId__totalWeight
    poolId__tx
    poolId__u
    poolId__unitSeconds
    poolId__upperTarget
    poolId__v
    poolId__w
    poolId__wrappedIndex
    poolId__z
    price
    pricingAsset
    timestamp
}

type TokenSnapshot {
    id: ID!
    timestamp: Int!
    token: Token!
    totalBalanceNotional: BigDecimal!
    totalBalanceUSD: BigDecimal!
    totalSwapCount: BigInt!
    totalVolumeNotional: BigDecimal!
    totalVolumeUSD: BigDecimal!
}

input TokenSnapshot_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [TokenSnapshot_filter]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [TokenSnapshot_filter]
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
    token: String
    token_: Token_filter
    token_contains: String
    token_contains_nocase: String
    token_ends_with: String
    token_ends_with_nocase: String
    token_gt: String
    token_gte: String
    token_in: [String!]
    token_lt: String
    token_lte: String
    token_not: String
    token_not_contains: String
    token_not_contains_nocase: String
    token_not_ends_with: String
    token_not_ends_with_nocase: String
    token_not_in: [String!]
    token_not_starts_with: String
    token_not_starts_with_nocase: String
    token_starts_with: String
    token_starts_with_nocase: String
    totalBalanceNotional: BigDecimal
    totalBalanceNotional_gt: BigDecimal
    totalBalanceNotional_gte: BigDecimal
    totalBalanceNotional_in: [BigDecimal!]
    totalBalanceNotional_lt: BigDecimal
    totalBalanceNotional_lte: BigDecimal
    totalBalanceNotional_not: BigDecimal
    totalBalanceNotional_not_in: [BigDecimal!]
    totalBalanceUSD: BigDecimal
    totalBalanceUSD_gt: BigDecimal
    totalBalanceUSD_gte: BigDecimal
    totalBalanceUSD_in: [BigDecimal!]
    totalBalanceUSD_lt: BigDecimal
    totalBalanceUSD_lte: BigDecimal
    totalBalanceUSD_not: BigDecimal
    totalBalanceUSD_not_in: [BigDecimal!]
    totalSwapCount: BigInt
    totalSwapCount_gt: BigInt
    totalSwapCount_gte: BigInt
    totalSwapCount_in: [BigInt!]
    totalSwapCount_lt: BigInt
    totalSwapCount_lte: BigInt
    totalSwapCount_not: BigInt
    totalSwapCount_not_in: [BigInt!]
    totalVolumeNotional: BigDecimal
    totalVolumeNotional_gt: BigDecimal
    totalVolumeNotional_gte: BigDecimal
    totalVolumeNotional_in: [BigDecimal!]
    totalVolumeNotional_lt: BigDecimal
    totalVolumeNotional_lte: BigDecimal
    totalVolumeNotional_not: BigDecimal
    totalVolumeNotional_not_in: [BigDecimal!]
    totalVolumeUSD: BigDecimal
    totalVolumeUSD_gt: BigDecimal
    totalVolumeUSD_gte: BigDecimal
    totalVolumeUSD_in: [BigDecimal!]
    totalVolumeUSD_lt: BigDecimal
    totalVolumeUSD_lte: BigDecimal
    totalVolumeUSD_not: BigDecimal
    totalVolumeUSD_not_in: [BigDecimal!]
}

enum TokenSnapshot_orderBy {
    id
    timestamp
    token
    token__address
    token__decimals
    token__fxOracleDecimals
    token__id
    token__latestFXPrice
    token__latestUSDPrice
    token__latestUSDPriceTimestamp
    token__name
    token__symbol
    token__totalBalanceNotional
    token__totalBalanceUSD
    token__totalSwapCount
    token__totalVolumeNotional
    token__totalVolumeUSD
    totalBalanceNotional
    totalBalanceUSD
    totalSwapCount
    totalVolumeNotional
    totalVolumeUSD
}

input Token_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    address: String
    address_contains: String
    address_contains_nocase: String
    address_ends_with: String
    address_ends_with_nocase: String
    address_gt: String
    address_gte: String
    address_in: [String!]
    address_lt: String
    address_lte: String
    address_not: String
    address_not_contains: String
    address_not_contains_nocase: String
    address_not_ends_with: String
    address_not_ends_with_nocase: String
    address_not_in: [String!]
    address_not_starts_with: String
    address_not_starts_with_nocase: String
    address_starts_with: String
    address_starts_with_nocase: String
    and: [Token_filter]
    decimals: Int
    decimals_gt: Int
    decimals_gte: Int
    decimals_in: [Int!]
    decimals_lt: Int
    decimals_lte: Int
    decimals_not: Int
    decimals_not_in: [Int!]
    fxOracleDecimals: Int
    fxOracleDecimals_gt: Int
    fxOracleDecimals_gte: Int
    fxOracleDecimals_in: [Int!]
    fxOracleDecimals_lt: Int
    fxOracleDecimals_lte: Int
    fxOracleDecimals_not: Int
    fxOracleDecimals_not_in: [Int!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    latestFXPrice: BigDecimal
    latestFXPrice_gt: BigDecimal
    latestFXPrice_gte: BigDecimal
    latestFXPrice_in: [BigDecimal!]
    latestFXPrice_lt: BigDecimal
    latestFXPrice_lte: BigDecimal
    latestFXPrice_not: BigDecimal
    latestFXPrice_not_in: [BigDecimal!]
    latestPrice: String
    latestPrice_: LatestPrice_filter
    latestPrice_contains: String
    latestPrice_contains_nocase: String
    latestPrice_ends_with: String
    latestPrice_ends_with_nocase: String
    latestPrice_gt: String
    latestPrice_gte: String
    latestPrice_in: [String!]
    latestPrice_lt: String
    latestPrice_lte: String
    latestPrice_not: String
    latestPrice_not_contains: String
    latestPrice_not_contains_nocase: String
    latestPrice_not_ends_with: String
    latestPrice_not_ends_with_nocase: String
    latestPrice_not_in: [String!]
    latestPrice_not_starts_with: String
    latestPrice_not_starts_with_nocase: String
    latestPrice_starts_with: String
    latestPrice_starts_with_nocase: String
    latestUSDPrice: BigDecimal
    latestUSDPriceTimestamp: BigInt
    latestUSDPriceTimestamp_gt: BigInt
    latestUSDPriceTimestamp_gte: BigInt
    latestUSDPriceTimestamp_in: [BigInt!]
    latestUSDPriceTimestamp_lt: BigInt
    latestUSDPriceTimestamp_lte: BigInt
    latestUSDPriceTimestamp_not: BigInt
    latestUSDPriceTimestamp_not_in: [BigInt!]
    latestUSDPrice_gt: BigDecimal
    latestUSDPrice_gte: BigDecimal
    latestUSDPrice_in: [BigDecimal!]
    latestUSDPrice_lt: BigDecimal
    latestUSDPrice_lte: BigDecimal
    latestUSDPrice_not: BigDecimal
    latestUSDPrice_not_in: [BigDecimal!]
    name: String
    name_contains: String
    name_contains_nocase: String
    name_ends_with: String
    name_ends_with_nocase: String
    name_gt: String
    name_gte: String
    name_in: [String!]
    name_lt: String
    name_lte: String
    name_not: String
    name_not_contains: String
    name_not_contains_nocase: String
    name_not_ends_with: String
    name_not_ends_with_nocase: String
    name_not_in: [String!]
    name_not_starts_with: String
    name_not_starts_with_nocase: String
    name_starts_with: String
    name_starts_with_nocase: String
    or: [Token_filter]
    pool: String
    pool_: Pool_filter
    pool_contains: String
    pool_contains_nocase: String
    pool_ends_with: String
    pool_ends_with_nocase: String
    pool_gt: String
    pool_gte: String
    pool_in: [String!]
    pool_lt: String
    pool_lte: String
    pool_not: String
    pool_not_contains: String
    pool_not_contains_nocase: String
    pool_not_ends_with: String
    pool_not_ends_with_nocase: String
    pool_not_in: [String!]
    pool_not_starts_with: String
    pool_not_starts_with_nocase: String
    pool_starts_with: String
    pool_starts_with_nocase: String
    symbol: String
    symbol_contains: String
    symbol_contains_nocase: String
    symbol_ends_with: String
    symbol_ends_with_nocase: String
    symbol_gt: String
    symbol_gte: String
    symbol_in: [String!]
    symbol_lt: String
    symbol_lte: String
    symbol_not: String
    symbol_not_contains: String
    symbol_not_contains_nocase: String
    symbol_not_ends_with: String
    symbol_not_ends_with_nocase: String
    symbol_not_in: [String!]
    symbol_not_starts_with: String
    symbol_not_starts_with_nocase: String
    symbol_starts_with: String
    symbol_starts_with_nocase: String
    totalBalanceNotional: BigDecimal
    totalBalanceNotional_gt: BigDecimal
    totalBalanceNotional_gte: BigDecimal
    totalBalanceNotional_in: [BigDecimal!]
    totalBalanceNotional_lt: BigDecimal
    totalBalanceNotional_lte: BigDecimal
    totalBalanceNotional_not: BigDecimal
    totalBalanceNotional_not_in: [BigDecimal!]
    totalBalanceUSD: BigDecimal
    totalBalanceUSD_gt: BigDecimal
    totalBalanceUSD_gte: BigDecimal
    totalBalanceUSD_in: [BigDecimal!]
    totalBalanceUSD_lt: BigDecimal
    totalBalanceUSD_lte: BigDecimal
    totalBalanceUSD_not: BigDecimal
    totalBalanceUSD_not_in: [BigDecimal!]
    totalSwapCount: BigInt
    totalSwapCount_gt: BigInt
    totalSwapCount_gte: BigInt
    totalSwapCount_in: [BigInt!]
    totalSwapCount_lt: BigInt
    totalSwapCount_lte: BigInt
    totalSwapCount_not: BigInt
    totalSwapCount_not_in: [BigInt!]
    totalVolumeNotional: BigDecimal
    totalVolumeNotional_gt: BigDecimal
    totalVolumeNotional_gte: BigDecimal
    totalVolumeNotional_in: [BigDecimal!]
    totalVolumeNotional_lt: BigDecimal
    totalVolumeNotional_lte: BigDecimal
    totalVolumeNotional_not: BigDecimal
    totalVolumeNotional_not_in: [BigDecimal!]
    totalVolumeUSD: BigDecimal
    totalVolumeUSD_gt: BigDecimal
    totalVolumeUSD_gte: BigDecimal
    totalVolumeUSD_in: [BigDecimal!]
    totalVolumeUSD_lt: BigDecimal
    totalVolumeUSD_lte: BigDecimal
    totalVolumeUSD_not: BigDecimal
    totalVolumeUSD_not_in: [BigDecimal!]
}

enum Token_orderBy {
    address
    decimals
    fxOracleDecimals
    id
    latestFXPrice
    latestPrice
    latestPrice__asset
    latestPrice__block
    latestPrice__id
    latestPrice__price
    latestPrice__pricingAsset
    latestUSDPrice
    latestUSDPriceTimestamp
    name
    pool
    pool__address
    pool__alpha
    pool__amp
    pool__baseToken
    pool__beta
    pool__c
    pool__createTime
    pool__dSq
    pool__delta
    pool__epsilon
    pool__expiryTime
    pool__factory
    pool__holdersCount
    pool__id
    pool__isInRecoveryMode
    pool__isPaused
    pool__joinExitEnabled
    pool__lambda
    pool__lastJoinExitAmp
    pool__lastPostJoinExitInvariant
    pool__lowerTarget
    pool__mainIndex
    pool__managementAumFee
    pool__managementFee
    pool__mustAllowlistLPs
    pool__name
    pool__oracleEnabled
    pool__owner
    pool__poolType
    pool__poolTypeVersion
    pool__principalToken
    pool__protocolAumFeeCache
    pool__protocolId
    pool__protocolSwapFeeCache
    pool__protocolYieldFeeCache
    pool__root3Alpha
    pool__s
    pool__sqrtAlpha
    pool__sqrtBeta
    pool__strategyType
    pool__swapEnabled
    pool__swapEnabledCurationSignal
    pool__swapEnabledInternal
    pool__swapFee
    pool__swapsCount
    pool__symbol
    pool__tauAlphaX
    pool__tauAlphaY
    pool__tauBetaX
    pool__tauBetaY
    pool__totalAumFeeCollectedInBPT
    pool__totalLiquidity
    pool__totalLiquiditySansBPT
    pool__totalProtocolFee
    pool__totalProtocolFeePaidInBPT
    pool__totalShares
    pool__totalSwapFee
    pool__totalSwapVolume
    pool__totalWeight
    pool__tx
    pool__u
    pool__unitSeconds
    pool__upperTarget
    pool__v
    pool__w
    pool__wrappedIndex
    pool__z
    symbol
    totalBalanceNotional
    totalBalanceUSD
    totalSwapCount
    totalVolumeNotional
    totalVolumeUSD
}

type TradePair {
    """
    Token Address - Token Address
    """
    id: ID!
    token0: Token!
    token1: Token!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
}

type TradePairSnapshot {
    id: ID!
    pair: TradePair!
    timestamp: Int!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
}

input TradePairSnapshot_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [TradePairSnapshot_filter]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [TradePairSnapshot_filter]
    pair: String
    pair_: TradePair_filter
    pair_contains: String
    pair_contains_nocase: String
    pair_ends_with: String
    pair_ends_with_nocase: String
    pair_gt: String
    pair_gte: String
    pair_in: [String!]
    pair_lt: String
    pair_lte: String
    pair_not: String
    pair_not_contains: String
    pair_not_contains_nocase: String
    pair_not_ends_with: String
    pair_not_ends_with_nocase: String
    pair_not_in: [String!]
    pair_not_starts_with: String
    pair_not_starts_with_nocase: String
    pair_starts_with: String
    pair_starts_with_nocase: String
    timestamp: Int
    timestamp_gt: Int
    timestamp_gte: Int
    timestamp_in: [Int!]
    timestamp_lt: Int
    timestamp_lte: Int
    timestamp_not: Int
    timestamp_not_in: [Int!]
    totalSwapFee: BigDecimal
    totalSwapFee_gt: BigDecimal
    totalSwapFee_gte: BigDecimal
    totalSwapFee_in: [BigDecimal!]
    totalSwapFee_lt: BigDecimal
    totalSwapFee_lte: BigDecimal
    totalSwapFee_not: BigDecimal
    totalSwapFee_not_in: [BigDecimal!]
    totalSwapVolume: BigDecimal
    totalSwapVolume_gt: BigDecimal
    totalSwapVolume_gte: BigDecimal
    totalSwapVolume_in: [BigDecimal!]
    totalSwapVolume_lt: BigDecimal
    totalSwapVolume_lte: BigDecimal
    totalSwapVolume_not: BigDecimal
    totalSwapVolume_not_in: [BigDecimal!]
}

enum TradePairSnapshot_orderBy {
    id
    pair
    pair__id
    pair__totalSwapFee
    pair__totalSwapVolume
    timestamp
    totalSwapFee
    totalSwapVolume
}

input TradePair_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [TradePair_filter]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [TradePair_filter]
    token0: String
    token0_: Token_filter
    token0_contains: String
    token0_contains_nocase: String
    token0_ends_with: String
    token0_ends_with_nocase: String
    token0_gt: String
    token0_gte: String
    token0_in: [String!]
    token0_lt: String
    token0_lte: String
    token0_not: String
    token0_not_contains: String
    token0_not_contains_nocase: String
    token0_not_ends_with: String
    token0_not_ends_with_nocase: String
    token0_not_in: [String!]
    token0_not_starts_with: String
    token0_not_starts_with_nocase: String
    token0_starts_with: String
    token0_starts_with_nocase: String
    token1: String
    token1_: Token_filter
    token1_contains: String
    token1_contains_nocase: String
    token1_ends_with: String
    token1_ends_with_nocase: String
    token1_gt: String
    token1_gte: String
    token1_in: [String!]
    token1_lt: String
    token1_lte: String
    token1_not: String
    token1_not_contains: String
    token1_not_contains_nocase: String
    token1_not_ends_with: String
    token1_not_ends_with_nocase: String
    token1_not_in: [String!]
    token1_not_starts_with: String
    token1_not_starts_with_nocase: String
    token1_starts_with: String
    token1_starts_with_nocase: String
    totalSwapFee: BigDecimal
    totalSwapFee_gt: BigDecimal
    totalSwapFee_gte: BigDecimal
    totalSwapFee_in: [BigDecimal!]
    totalSwapFee_lt: BigDecimal
    totalSwapFee_lte: BigDecimal
    totalSwapFee_not: BigDecimal
    totalSwapFee_not_in: [BigDecimal!]
    totalSwapVolume: BigDecimal
    totalSwapVolume_gt: BigDecimal
    totalSwapVolume_gte: BigDecimal
    totalSwapVolume_in: [BigDecimal!]
    totalSwapVolume_lt: BigDecimal
    totalSwapVolume_lte: BigDecimal
    totalSwapVolume_not: BigDecimal
    totalSwapVolume_not_in: [BigDecimal!]
}

enum TradePair_orderBy {
    id
    token0
    token0__address
    token0__decimals
    token0__fxOracleDecimals
    token0__id
    token0__latestFXPrice
    token0__latestUSDPrice
    token0__latestUSDPriceTimestamp
    token0__name
    token0__symbol
    token0__totalBalanceNotional
    token0__totalBalanceUSD
    token0__totalSwapCount
    token0__totalVolumeNotional
    token0__totalVolumeUSD
    token1
    token1__address
    token1__decimals
    token1__fxOracleDecimals
    token1__id
    token1__latestFXPrice
    token1__latestUSDPrice
    token1__latestUSDPriceTimestamp
    token1__name
    token1__symbol
    token1__totalBalanceNotional
    token1__totalBalanceUSD
    token1__totalSwapCount
    token1__totalVolumeNotional
    token1__totalVolumeUSD
    totalSwapFee
    totalSwapVolume
}

type User {
    id: ID!
    sharesOwned(
        first: Int = 100
        orderBy: PoolShare_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: PoolShare_filter
    ): [PoolShare!]
    swaps(
        first: Int = 100
        orderBy: Swap_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: Swap_filter
    ): [Swap!]
    userInternalBalances(
        first: Int = 100
        orderBy: UserInternalBalance_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: UserInternalBalance_filter
    ): [UserInternalBalance!]
}

type UserInternalBalance {
    balance: BigDecimal!
    id: ID!
    token: Bytes!
    tokenInfo: Token
    userAddress: User
}

input UserInternalBalance_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [UserInternalBalance_filter]
    balance: BigDecimal
    balance_gt: BigDecimal
    balance_gte: BigDecimal
    balance_in: [BigDecimal!]
    balance_lt: BigDecimal
    balance_lte: BigDecimal
    balance_not: BigDecimal
    balance_not_in: [BigDecimal!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [UserInternalBalance_filter]
    token: Bytes
    tokenInfo: String
    tokenInfo_: Token_filter
    tokenInfo_contains: String
    tokenInfo_contains_nocase: String
    tokenInfo_ends_with: String
    tokenInfo_ends_with_nocase: String
    tokenInfo_gt: String
    tokenInfo_gte: String
    tokenInfo_in: [String!]
    tokenInfo_lt: String
    tokenInfo_lte: String
    tokenInfo_not: String
    tokenInfo_not_contains: String
    tokenInfo_not_contains_nocase: String
    tokenInfo_not_ends_with: String
    tokenInfo_not_ends_with_nocase: String
    tokenInfo_not_in: [String!]
    tokenInfo_not_starts_with: String
    tokenInfo_not_starts_with_nocase: String
    tokenInfo_starts_with: String
    tokenInfo_starts_with_nocase: String
    token_contains: Bytes
    token_gt: Bytes
    token_gte: Bytes
    token_in: [Bytes!]
    token_lt: Bytes
    token_lte: Bytes
    token_not: Bytes
    token_not_contains: Bytes
    token_not_in: [Bytes!]
    userAddress: String
    userAddress_: User_filter
    userAddress_contains: String
    userAddress_contains_nocase: String
    userAddress_ends_with: String
    userAddress_ends_with_nocase: String
    userAddress_gt: String
    userAddress_gte: String
    userAddress_in: [String!]
    userAddress_lt: String
    userAddress_lte: String
    userAddress_not: String
    userAddress_not_contains: String
    userAddress_not_contains_nocase: String
    userAddress_not_ends_with: String
    userAddress_not_ends_with_nocase: String
    userAddress_not_in: [String!]
    userAddress_not_starts_with: String
    userAddress_not_starts_with_nocase: String
    userAddress_starts_with: String
    userAddress_starts_with_nocase: String
}

enum UserInternalBalance_orderBy {
    balance
    id
    token
    tokenInfo
    tokenInfo__address
    tokenInfo__decimals
    tokenInfo__fxOracleDecimals
    tokenInfo__id
    tokenInfo__latestFXPrice
    tokenInfo__latestUSDPrice
    tokenInfo__latestUSDPriceTimestamp
    tokenInfo__name
    tokenInfo__symbol
    tokenInfo__totalBalanceNotional
    tokenInfo__totalBalanceUSD
    tokenInfo__totalSwapCount
    tokenInfo__totalVolumeNotional
    tokenInfo__totalVolumeUSD
    userAddress
    userAddress__id
}

input User_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    and: [User_filter]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [User_filter]
    sharesOwned_: PoolShare_filter
    swaps_: Swap_filter
    userInternalBalances_: UserInternalBalance_filter
}

enum User_orderBy {
    id
    sharesOwned
    swaps
    userInternalBalances
}

type _Block_ {
    """
    The hash of the block
    """
    hash: Bytes

    """
    The block number
    """
    number: Int!

    """
    The hash of the parent block
    """
    parentHash: Bytes

    """
    Integer representation of the timestamp stored in blocks for the chain
    """
    timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
    """
    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!

    """
    The deployment ID
    """
    deployment: String!

    """
    If `true`, the subgraph encountered indexing errors at some past block
    """
    hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
    """
    Data will be returned even if the subgraph has indexing errors
    """
    allow

    """
    If the subgraph has indexing errors, data will be omitted. The default.
    """
    deny
}
