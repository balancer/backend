"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""
Defined a Subgraph ID for an object type
"""
directive @subgraphId(id: String!) on OBJECT

enum Aggregation_interval {
    day
    hour
}

type Bar {
    address: Bytes!
    block: BigInt!
    decimals: Int!
    fBeetsBurned: BigDecimal!
    fBeetsMinted: BigDecimal!
    id: ID!
    name: String!
    ratio: BigDecimal!
    sharedVestingTokenRevenue: BigDecimal!
    symbol: String!
    timestamp: BigInt!
    totalSupply: BigDecimal!
    users(
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0
        where: User_filter
    ): [User!]!
    vestingToken: Bytes!
    vestingTokenStaked: BigDecimal!
}

input Bar_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    address: Bytes
    address_contains: Bytes
    address_gt: Bytes
    address_gte: Bytes
    address_in: [Bytes!]
    address_lt: Bytes
    address_lte: Bytes
    address_not: Bytes
    address_not_contains: Bytes
    address_not_in: [Bytes!]
    and: [Bar_filter]
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    decimals: Int
    decimals_gt: Int
    decimals_gte: Int
    decimals_in: [Int!]
    decimals_lt: Int
    decimals_lte: Int
    decimals_not: Int
    decimals_not_in: [Int!]
    fBeetsBurned: BigDecimal
    fBeetsBurned_gt: BigDecimal
    fBeetsBurned_gte: BigDecimal
    fBeetsBurned_in: [BigDecimal!]
    fBeetsBurned_lt: BigDecimal
    fBeetsBurned_lte: BigDecimal
    fBeetsBurned_not: BigDecimal
    fBeetsBurned_not_in: [BigDecimal!]
    fBeetsMinted: BigDecimal
    fBeetsMinted_gt: BigDecimal
    fBeetsMinted_gte: BigDecimal
    fBeetsMinted_in: [BigDecimal!]
    fBeetsMinted_lt: BigDecimal
    fBeetsMinted_lte: BigDecimal
    fBeetsMinted_not: BigDecimal
    fBeetsMinted_not_in: [BigDecimal!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    name: String
    name_contains: String
    name_contains_nocase: String
    name_ends_with: String
    name_ends_with_nocase: String
    name_gt: String
    name_gte: String
    name_in: [String!]
    name_lt: String
    name_lte: String
    name_not: String
    name_not_contains: String
    name_not_contains_nocase: String
    name_not_ends_with: String
    name_not_ends_with_nocase: String
    name_not_in: [String!]
    name_not_starts_with: String
    name_not_starts_with_nocase: String
    name_starts_with: String
    name_starts_with_nocase: String
    or: [Bar_filter]
    ratio: BigDecimal
    ratio_gt: BigDecimal
    ratio_gte: BigDecimal
    ratio_in: [BigDecimal!]
    ratio_lt: BigDecimal
    ratio_lte: BigDecimal
    ratio_not: BigDecimal
    ratio_not_in: [BigDecimal!]
    sharedVestingTokenRevenue: BigDecimal
    sharedVestingTokenRevenue_gt: BigDecimal
    sharedVestingTokenRevenue_gte: BigDecimal
    sharedVestingTokenRevenue_in: [BigDecimal!]
    sharedVestingTokenRevenue_lt: BigDecimal
    sharedVestingTokenRevenue_lte: BigDecimal
    sharedVestingTokenRevenue_not: BigDecimal
    sharedVestingTokenRevenue_not_in: [BigDecimal!]
    symbol: String
    symbol_contains: String
    symbol_contains_nocase: String
    symbol_ends_with: String
    symbol_ends_with_nocase: String
    symbol_gt: String
    symbol_gte: String
    symbol_in: [String!]
    symbol_lt: String
    symbol_lte: String
    symbol_not: String
    symbol_not_contains: String
    symbol_not_contains_nocase: String
    symbol_not_ends_with: String
    symbol_not_ends_with_nocase: String
    symbol_not_in: [String!]
    symbol_not_starts_with: String
    symbol_not_starts_with_nocase: String
    symbol_starts_with: String
    symbol_starts_with_nocase: String
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    totalSupply: BigDecimal
    totalSupply_gt: BigDecimal
    totalSupply_gte: BigDecimal
    totalSupply_in: [BigDecimal!]
    totalSupply_lt: BigDecimal
    totalSupply_lte: BigDecimal
    totalSupply_not: BigDecimal
    totalSupply_not_in: [BigDecimal!]
    users_: User_filter
    vestingToken: Bytes
    vestingTokenStaked: BigDecimal
    vestingTokenStaked_gt: BigDecimal
    vestingTokenStaked_gte: BigDecimal
    vestingTokenStaked_in: [BigDecimal!]
    vestingTokenStaked_lt: BigDecimal
    vestingTokenStaked_lte: BigDecimal
    vestingTokenStaked_not: BigDecimal
    vestingTokenStaked_not_in: [BigDecimal!]
    vestingToken_contains: Bytes
    vestingToken_gt: Bytes
    vestingToken_gte: Bytes
    vestingToken_in: [Bytes!]
    vestingToken_lt: Bytes
    vestingToken_lte: Bytes
    vestingToken_not: Bytes
    vestingToken_not_contains: Bytes
    vestingToken_not_in: [Bytes!]
}

enum Bar_orderBy {
    address
    block
    decimals
    fBeetsBurned
    fBeetsMinted
    id
    name
    ratio
    sharedVestingTokenRevenue
    symbol
    timestamp
    totalSupply
    users
    vestingToken
    vestingTokenStaked
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
    number_gte: Int!
}

input Block_height {
    hash: Bytes
    number: Int
    number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer
"""
scalar Int8

"""
Defines the order direction, either ascending or descending
"""
enum OrderDirection {
    asc
    desc
}

type Query {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    bar(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Bar
    bars(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Bar_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Bar_filter
    ): [Bar!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
}

type Subscription {
    """
    Access to subgraph metadata
    """
    _meta(block: Block_height): _Meta_
    bar(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): Bar
    bars(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: Bar_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: Bar_filter
    ): [Bar!]!
    user(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        id: ID!

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
    ): User
    users(
        """
        The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
        """
        block: Block_height
        first: Int = 100
        orderBy: User_orderBy
        orderDirection: OrderDirection
        skip: Int = 0

        """
        Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
        """
        subgraphError: _SubgraphErrorPolicy_! = deny
        where: User_filter
    ): [User!]!
}

"""
A string representation of microseconds UNIX timestamp (16 digits)
"""
scalar Timestamp

type User {
    address: Bytes!
    bar: Bar
    block: BigInt!
    fBeets: BigDecimal!
    id: ID!
    timestamp: BigInt!
    vestingTokenHarvested: BigDecimal!
    vestingTokenIn: BigDecimal!
    vestingTokenOut: BigDecimal!
}

input User_filter {
    """
    Filter for the block changed event.
    """
    _change_block: BlockChangedFilter
    address: Bytes
    address_contains: Bytes
    address_gt: Bytes
    address_gte: Bytes
    address_in: [Bytes!]
    address_lt: Bytes
    address_lte: Bytes
    address_not: Bytes
    address_not_contains: Bytes
    address_not_in: [Bytes!]
    and: [User_filter]
    bar: String
    bar_: Bar_filter
    bar_contains: String
    bar_contains_nocase: String
    bar_ends_with: String
    bar_ends_with_nocase: String
    bar_gt: String
    bar_gte: String
    bar_in: [String!]
    bar_lt: String
    bar_lte: String
    bar_not: String
    bar_not_contains: String
    bar_not_contains_nocase: String
    bar_not_ends_with: String
    bar_not_ends_with_nocase: String
    bar_not_in: [String!]
    bar_not_starts_with: String
    bar_not_starts_with_nocase: String
    bar_starts_with: String
    bar_starts_with_nocase: String
    block: BigInt
    block_gt: BigInt
    block_gte: BigInt
    block_in: [BigInt!]
    block_lt: BigInt
    block_lte: BigInt
    block_not: BigInt
    block_not_in: [BigInt!]
    fBeets: BigDecimal
    fBeets_gt: BigDecimal
    fBeets_gte: BigDecimal
    fBeets_in: [BigDecimal!]
    fBeets_lt: BigDecimal
    fBeets_lte: BigDecimal
    fBeets_not: BigDecimal
    fBeets_not_in: [BigDecimal!]
    id: ID
    id_gt: ID
    id_gte: ID
    id_in: [ID!]
    id_lt: ID
    id_lte: ID
    id_not: ID
    id_not_in: [ID!]
    or: [User_filter]
    timestamp: BigInt
    timestamp_gt: BigInt
    timestamp_gte: BigInt
    timestamp_in: [BigInt!]
    timestamp_lt: BigInt
    timestamp_lte: BigInt
    timestamp_not: BigInt
    timestamp_not_in: [BigInt!]
    vestingTokenHarvested: BigDecimal
    vestingTokenHarvested_gt: BigDecimal
    vestingTokenHarvested_gte: BigDecimal
    vestingTokenHarvested_in: [BigDecimal!]
    vestingTokenHarvested_lt: BigDecimal
    vestingTokenHarvested_lte: BigDecimal
    vestingTokenHarvested_not: BigDecimal
    vestingTokenHarvested_not_in: [BigDecimal!]
    vestingTokenIn: BigDecimal
    vestingTokenIn_gt: BigDecimal
    vestingTokenIn_gte: BigDecimal
    vestingTokenIn_in: [BigDecimal!]
    vestingTokenIn_lt: BigDecimal
    vestingTokenIn_lte: BigDecimal
    vestingTokenIn_not: BigDecimal
    vestingTokenIn_not_in: [BigDecimal!]
    vestingTokenOut: BigDecimal
    vestingTokenOut_gt: BigDecimal
    vestingTokenOut_gte: BigDecimal
    vestingTokenOut_in: [BigDecimal!]
    vestingTokenOut_lt: BigDecimal
    vestingTokenOut_lte: BigDecimal
    vestingTokenOut_not: BigDecimal
    vestingTokenOut_not_in: [BigDecimal!]
}

enum User_orderBy {
    address
    bar
    bar__address
    bar__block
    bar__decimals
    bar__fBeetsBurned
    bar__fBeetsMinted
    bar__id
    bar__name
    bar__ratio
    bar__sharedVestingTokenRevenue
    bar__symbol
    bar__timestamp
    bar__totalSupply
    bar__vestingToken
    bar__vestingTokenStaked
    block
    fBeets
    id
    timestamp
    vestingTokenHarvested
    vestingTokenIn
    vestingTokenOut
}

type _Block_ {
    """
    The hash of the block
    """
    hash: Bytes

    """
    The block number
    """
    number: Int!

    """
    The hash of the parent block
    """
    parentHash: Bytes

    """
    Integer representation of the timestamp stored in blocks for the chain
    """
    timestamp: Int
}

"""
The type for the top-level _meta field
"""
type _Meta_ {
    """
    Information about a specific subgraph block. The hash of the block
    will be null if the _meta field has a block constraint that asks for
    a block number. It will be filled if the _meta field has no block constraint
    and therefore asks for the latest  block
    """
    block: _Block_!

    """
    The deployment ID
    """
    deployment: String!

    """
    If `true`, the subgraph encountered indexing errors at some past block
    """
    hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
    """
    Data will be returned even if the subgraph has indexing errors
    """
    allow

    """
    If the subgraph has indexing errors, data will be omitted. The default.
    """
    deny
}
