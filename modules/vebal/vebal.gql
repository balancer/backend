extend type Query {
    veBalGetUserBalance(chain: GqlChain, address: String): AmountHumanReadable!
    veBalGetTotalSupply(chain: GqlChain): AmountHumanReadable!
    veBalGetVotingList: [GqlVotingPool!]!
    veBalGetUser(chain: GqlChain, address: String!): GqlVeBalUserData!
}

extend type Mutation {
    veBalSyncAllUserBalances: String!
    veBalSyncTotalSupply: String!
}

type GqlVeBalUserData {
    balance: AmountHumanReadable!
    locked: AmountHumanReadable!
    lockedUsd: AmountHumanReadable!
    rank: Int
}

type GqlVotingPool {
    id: ID!
    chain: GqlChain!
    symbol: String!
    address: Bytes!
    type: GqlPoolType!

    tokens: [GqlVotingGaugeToken!]!

    gauge: GqlVotingGauge!
}

type GqlVotingGaugeToken {
    address: String!
    weight: String
    symbol: String!
    logoURI: String!
}

type GqlVotingGauge {
    address: Bytes!
    childGaugeAddress: Bytes
    relativeWeightCap: String
    isKilled: Boolean!
    relativeWeight: String!
    addedTimestamp: Int
}
