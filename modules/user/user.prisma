model PrismaUser {
    address                 String              @id

    userSnapshots           PrismaUserPoolBalanceSnapshot[]
    relicSnapshots          PrismaUserRelicSnapshot[]

    walletBalances          PrismaUserWalletBalance[]
    stakedBalances          PrismaUserStakedBalance[]
    
    veBalBalance            PrismaVeBalUserBalance[]
}



model PrismaUserWalletBalance {
    @@id([id, chain])
    @@index(userAddress)

    id                      String
    chain                   Chain               

    balance                 String
    balanceNum              Float
    updatedAt               DateTime            @updatedAt

    userAddress             String
    user                    PrismaUser          @relation(fields:[userAddress], references: [address], onDelete: Cascade)

    poolId                  String?
    pool                    PrismaPool?         @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)

    tokenAddress            String
    token                   PrismaToken         @relation(fields:[tokenAddress, chain], references: [address, chain], onDelete: Cascade)
}


model PrismaUserStakedBalance {
    @@id([id, chain])
    @@index(userAddress)

    id                      String
    chain                   Chain               
    balance                 String
    balanceNum              Float
    updatedAt               DateTime            @updatedAt

    userAddress             String
    user                    PrismaUser          @relation(fields:[userAddress], references: [address], onDelete: Cascade)

    poolId                  String?
    pool                    PrismaPool?          @relation(fields:[poolId, chain], references: [id, chain], onDelete: Cascade)

    tokenAddress            String
    token                   PrismaToken         @relation(fields:[tokenAddress, chain], references: [address, chain], onDelete: Cascade)

    stakingId               String
    staking                 PrismaPoolStaking   @relation(fields:[stakingId, chain], references: [id, chain], onDelete: Cascade)
}

model PrismaUserBalanceSyncStatus {
    @@id([type, chain])

    type                PrismaUserBalanceType
    chain               Chain                   
    blockNumber         Int
}

enum PrismaUserBalanceType {
    WALLET
    STAKED
    RELIQUARY
    AURA
}

model PrismaUserPoolBalanceSnapshot {
    @@id([id, chain])

    id                      String
    userAddress             String
    user                    PrismaUser          @relation(fields:[userAddress], references: [address])
    chain                   Chain               
    timestamp               Int

    poolToken               String
    poolId                  String?
    pool                    PrismaPool?         @relation(fields:[poolId, chain], references:[id, chain])

    walletBalance           String
    gaugeBalance            String
    farmBalance             String
    totalBalance            String
    percentShare            String
    totalValueUSD           String
    fees24h                 String
}

model PrismaUserRelicSnapshot {
    @@id([id, chain])

    id                      String
    userAddress             String
    user                    PrismaUser          @relation(fields:[userAddress], references: [address])
    chain                   Chain               
    timestamp               Int

    relicId                 Int
    farmId                  String
    farm                    PrismaPoolStakingReliquaryFarm @relation(fields:[farmId, chain], references: [id, chain])
    balance                 String
    entryTimestamp          Int
    level                   Int
}
